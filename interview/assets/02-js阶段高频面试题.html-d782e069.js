import{_ as n,p as a,q as s,a1 as e}from"./framework-96b046e1.js";const t={},p=e(`<h1 id="_02-js阶段高频面试题" tabindex="-1"><a class="header-anchor" href="#_02-js阶段高频面试题" aria-hidden="true">#</a> 02 -js阶段高频面试题</h1><h2 id="前端面试题" tabindex="-1"><a class="header-anchor" href="#前端面试题" aria-hidden="true">#</a> 前端面试题</h2><h3 id="_1、js的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#_1、js的数据类型有哪些" aria-hidden="true">#</a> 1、js的数据类型有哪些</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>答: 简单数据类型: number string boolean undefined   null
	复杂数据类型: object  function  array
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、typeof-返回的数据类型" tabindex="-1"><a class="header-anchor" href="#_2、typeof-返回的数据类型" aria-hidden="true">#</a> 2、typeof 返回的数据类型</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>答: number string boolean undefined  object  function 
   特殊情况：
   typeof null --&gt;object
   typeof array --&gt;object
   typeof typeof 任何类型  --&gt;string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、返回false的情况有哪些" tabindex="-1"><a class="header-anchor" href="#_3、返回false的情况有哪些" aria-hidden="true">#</a> 3、返回false的情况有哪些</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>答: 0  &quot;&quot;   null  false  NaN  undefined  不成立的表达式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4、typeof-和-instanceof-的区别" tabindex="-1"><a class="header-anchor" href="#_4、typeof-和-instanceof-的区别" aria-hidden="true">#</a> 4、typeof 和 instanceof 的区别</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值
2、instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型
3、而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，array也无法判断
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、-的区别" tabindex="-1"><a class="header-anchor" href="#_5、-的区别" aria-hidden="true">#</a> 5、 的区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>答：<span class="token operator">==</span> 表示是相等，只比较内容
   <span class="token operator">===</span> 表示是全等，不仅比较内容，也比较类型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#_6、null-和-undefined-的区别" aria-hidden="true">#</a> 6、null 和 undefined 的区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>答：<span class="token keyword">null</span> 表示空值 没有获取到。<span class="token keyword">typeof</span> <span class="token keyword">null</span> 返回<span class="token string">&quot;object&quot;</span>
   <span class="token keyword">undefined</span> 表示未定义，声明没有值。<span class="token keyword">typeof</span> <span class="token keyword">undefined</span> 返回<span class="token string">&quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、let、const、var的区别" tabindex="-1"><a class="header-anchor" href="#_7、let、const、var的区别" aria-hidden="true">#</a> 7、let、const、var的区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、<span class="token keyword">var</span>声明变量存在提升（提升当前作用域最顶端），<span class="token keyword">let</span>和<span class="token keyword">const</span>是不存在变量提升的情况
<span class="token number">2</span>、<span class="token keyword">var</span>没有块级作用，<span class="token keyword">let</span>和<span class="token keyword">const</span>存在块级作用域
<span class="token number">3</span>、<span class="token keyword">var</span>允许重复声明，<span class="token keyword">let</span>和<span class="token keyword">const</span>在同一作用域不允许重复声明
<span class="token number">4</span>、<span class="token keyword">var</span>和<span class="token keyword">let</span>声明变量可以修改，<span class="token keyword">const</span>是常量不能改变
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、什么是作用域链" tabindex="-1"><a class="header-anchor" href="#_8、什么是作用域链" aria-hidden="true">#</a> 8、什么是作用域链</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、作用域：分全局作用域和局部作用域
<span class="token number">2</span>、在访问一个变量时，首先在当前作用域中找，如果找不到再到外层作用域中找，这样一层一层的查找，就形成了作用域链。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9、for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#_9、for-in-和-for-of-的区别" aria-hidden="true">#</a> 9、for in 和 for of 的区别</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、<span class="token keyword">for</span>…<span class="token keyword">in</span>是遍历数组、对象的key
<span class="token number">2</span>、<span class="token keyword">for</span>…<span class="token keyword">of</span>是遍历数组的value
例如：
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token number">1</span>）<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">let</span> key <span class="token keyword">in</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0 1</span>
  <span class="token punctuation">}</span>
  <span class="token number">2</span>）<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">let</span> value <span class="token keyword">of</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//a b</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、数组去重的方式" tabindex="-1"><a class="header-anchor" href="#_10、数组去重的方式" aria-hidden="true">#</a> 10、数组去重的方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、 <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token number">2</span>、 <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","02-js阶段高频面试题.html.vue"]]);export{d as default};
