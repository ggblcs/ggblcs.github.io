import{_ as s,p as n,q as a,a1 as e}from"./framework-96b046e1.js";const t={},p=e(`<h1 id="_055-继承" tabindex="-1"><a class="header-anchor" href="#_055-继承" aria-hidden="true">#</a> 055 继承</h1><p>extends 当派生类继承了基类后，就自动继承了基类的非私有成员。</p><ol><li>重写基类成员，在派生类中定义了与基类中同名的成员变量和成员函数。</li><li>若派生类重写了基类中的受保护成员，则可以将该成员的可访问性设置为受保护的或公有的，但不允许将其重写为私有成员。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">protected</span> x<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">protected</span> y<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">protected</span> z<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> x<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// ok</span>
    <span class="token keyword">protected</span> y<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// ok</span>
    <span class="token comment">// private z:string = &#39;&#39; // error 派生类不能够将基类的受保护成员写成更严格的可访问性。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于派生类时基类子类型，因此在重写基类的成员时需要保证子类型兼容性。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    color<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span>
    <span class="token function">switchColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">===</span> <span class="token string">&#39;black&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;white&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;black&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// switchColor(color: string) { } </span>
    <span class="token comment">// error 类型(color:stirng) =&gt; void 不能赋值给类型() =&gt; {}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单继承：Ts的类仅支持单继承，不支持多继承，也就是说，在extends语句中只能指定一个基类。</p>`,7),o=[p];function c(l,i){return n(),a("div",null,o)}const k=s(t,[["render",c],["__file","055继承.html.vue"]]);export{k as default};
