import{_ as e,p as a,q as l,a1 as s}from"./framework-96b046e1.js";const d={},i=s(`<h1 id="_09-样式绑定" tabindex="-1"><a class="header-anchor" href="#_09-样式绑定" aria-hidden="true">#</a> 09 样式绑定</h1><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>:class=&quot;{类名:boolean}&quot;  class=&quot;&quot; 多个class会进行合并
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>写在计算属性中，返回一个类名对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>写在数组中 [class, key, {active: boolean}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>:style=&quot;{color: activeColor}&quot; 对象中的css样式可用驼峰式命名，或 &#39;-&#39; 分割
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>大概这四种方法。</p><p>不可见元素：template （相当于block）使用v-if，v-for更方便。</p>`,7),n=[i];function t(c,r){return a(),l("div",null,n)}const u=e(d,[["render",t],["__file","09样式绑定.html.vue"]]);export{u as default};
