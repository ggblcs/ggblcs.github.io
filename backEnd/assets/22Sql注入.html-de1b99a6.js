import{_ as e,p as s,q as a,a1 as n}from"./framework-96b046e1.js";const d={},r=n(`<h1 id="_22-sql注入" tabindex="-1"><a class="header-anchor" href="#_22-sql注入" aria-hidden="true">#</a> 22 Sql注入</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
1.什么是SQL注入?
SQL注入是一种古老的攻击方式，
SQL注入是通过利用一些查询语句的漏洞,
让我们的应用程序执行不正确的SQL语句的一种攻击方式

2.如何房子SQL注入?
执行SQL语句之前过滤掉特殊字符
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实践方式</p><h2 id="_01-注释sql语句方式" tabindex="-1"><a class="header-anchor" href="#_01-注释sql语句方式" aria-hidden="true">#</a> 01 注释sql语句方式</h2><p>在输入登录账号是结尾输入<code>&#39;-- </code>即可完成注入，登录成功！</p><p>原因：<code>&#39;</code>表示账号输入完毕，<code>--</code>表示注释。查询语句中，相当于不再匹配密码，因为那些部分都被注释了。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">&#39;111&#39;</span><span class="token comment">-- &#39; and password = &#39;6f7e1dc5429b8d9a9afa55b206bc7568&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>-- </code>后一定要有一个空格， 其他地方无所谓。</p><h2 id="_02-或者条件方式" tabindex="-1"><a class="header-anchor" href="#_02-或者条件方式" aria-hidden="true">#</a> 02 或者条件方式</h2><p>在输入账号结尾输入<code>&#39; or &#39;1=1</code> 即可。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">&#39;111&#39;</span> <span class="token operator">or</span> <span class="token string">&#39;1=1&#39;</span> <span class="token operator">and</span> password <span class="token operator">=</span> <span class="token string">&#39;549f1f9800081082f10131568d1e306f&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_03-解决方案" tabindex="-1"><a class="header-anchor" href="#_03-解决方案" aria-hidden="true">#</a> 03 解决方案</h2><p><code>mysql.escape</code> 方法可过滤转译特殊字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>username <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意点<strong>报错问题</strong>：</p><p>使用这个方法后字符串会被自动加上引号，所以需要把之前手动加的引号去掉。</p><p>例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>let sql = \`select * from user where username = &#39;\${username}&#39;\`
// 去掉引号改为
let sql = \`select * from user where username = \${username}\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),l=[r];function i(c,o){return s(),a("div",null,l)}const p=e(d,[["render",i],["__file","22Sql注入.html.vue"]]);export{p as default};
