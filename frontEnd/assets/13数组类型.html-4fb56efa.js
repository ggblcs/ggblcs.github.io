import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const t={},e=p(`<h1 id="_13-数组类型" tabindex="-1"><a class="header-anchor" href="#_13-数组类型" aria-hidden="true">#</a> 13 数组类型</h1><h2 id="_1-数组类型定义" tabindex="-1"><a class="header-anchor" href="#_1-数组类型定义" aria-hidden="true">#</a> 1 数组类型定义</h2><ol><li>简便数组表示法</li><li>泛型数组表示法</li></ol><p>简便数组表示法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 需求: 要求定义一个数组, 这个数组中将来只能存储字符串类型的数据</span>
<span class="token keyword">let</span> arr2<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 表示定义了一个名称叫做arr2的数组, 这个数组中将来只能够存储字符串类型的数据</span>
arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// arr2 = [1, &#39;b&#39;, &#39;c&#39;]; // 报错</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 联合类型</span>
<span class="token keyword">let</span> arr3<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 表示定义了一个名称叫做arr3的数组, 这个数组中将来既可以存储数值类型的数据, 也可以存储字符串类型的数据</span>
arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// arr3 = [1, &#39;b&#39;, 2, &#39;c&#39;, false]; // 报错</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 任意类型</span>
<span class="token keyword">let</span> arr4<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 表示定义了一个名称叫做arr4的数组, 这个数组中将来可以存储任意类型的数据</span>
arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型数组表示法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 需求: 要求定义一个数组, 这个数组中将来只能存储数值类型的数据</span>
<span class="token keyword">let</span> arr1<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 表示定义了一个名称叫做arr1的数组, 这个数组中将来只能够存储数值类型的数据</span>
arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// arr1 = [&#39;a&#39;, 3, 5]; // 报错</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 联合类型</span>
<span class="token keyword">let</span> arr8<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">// 没名字，限制更多</span>
<span class="token comment">// x y z类型，变量名都是限制死的，只能这样写</span>
<span class="token keyword">let</span> arr9<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> z<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> z<span class="token operator">:</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> z<span class="token operator">:</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-数组元素的类型" tabindex="-1"><a class="header-anchor" href="#_2-数组元素的类型" aria-hidden="true">#</a> 2 数组元素的类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> a<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 
<span class="token comment">// ok number类型，只能赋值给number类型</span>
<span class="token keyword">const</span> b<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> 
<span class="token comment">// ok 虽然arr[100]是undefined不能赋值给number类型变量，但是typescript无法推断出 数组访问越界了。</span>
<span class="token comment">// const c:undefined = arr[100]</span>
<span class="token comment">// 报错</span>

<span class="token keyword">let</span> d <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">// ok 虽然没有说明d的类型，但是ts编译器能够从数类型中推断出d的类型。所以d是数值类型</span>
<span class="token comment">// d = &#39;a&#39; // 报错</span>
<span class="token keyword">let</span> e <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>
<span class="token comment">// e = undefined // 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-只读数组" tabindex="-1"><a class="header-anchor" href="#_3-只读数组" aria-hidden="true">#</a> 3 只读数组</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// typescript提供了三种方式来定义一个只读数组，三种方式只是语法不同，功能没任何区别</span>
<span class="token comment">// 1 使用ReadonlyArray&lt;T&gt;内置类型</span>
<span class="token keyword">let</span> arr1<span class="token operator">:</span>ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token comment">// arr1[2] = 888 // 报错，仅允许读取</span>
<span class="token comment">// arr1.push(5) // 报错，只读数组上不存在push</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
<span class="token comment">// let arr11:number[] = arr1; // 报错，不允许只读数组赋值给普通数组</span>
<span class="token comment">// arr1 = [888] // ok， 允许普通数组赋值给只读数组，如果想不能修改arr1，可以使用const声明。</span>

<span class="token comment">// 2 使用readonly修饰符</span>
<span class="token keyword">const</span> arr2<span class="token operator">:</span><span class="token keyword">readonly</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">// 注意点：readonly修饰符不能与泛型数组类型表示法一起使用</span>
<span class="token comment">// const arr21:readonly Array&lt;number&gt; = [2, 3] // 报错 仅允许对数组和元组字面量类型使用 &quot;readonly&quot; 类型修饰符。</span>

<span class="token comment">// 3 使用Readonly&lt;T&gt;工具类型</span>
<span class="token comment">/*
“Readonly&lt;T&gt;”是TypeScript提供的一个内置工具类型，
用于定义只读对象类型。该工具类型能够将类型参数T的所有属性转换为只读属性，
它的定义如下所示：
type Readonly&lt;T&gt; = {
    readonly [P in keyof T]: T[P];
};
*/</span>
<span class="token keyword">const</span> arr3<span class="token operator">:</span>Readonly<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">/*
需要注意的是，类型参数T的值为数组类型“number[]”，
而不是数组元素类型number。
在这一点上，它与“ReadonlyArray&lt;T&gt;”类型是有区别的。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[e];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","13数组类型.html.vue"]]);export{u as default};
