import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const p={},t=e(`<h1 id="_17-字面量类型" tabindex="-1"><a class="header-anchor" href="#_17-字面量类型" aria-hidden="true">#</a> 17 字面量类型</h1><h2 id="_1-boolean字面量类型" tabindex="-1"><a class="header-anchor" href="#_1-boolean字面量类型" aria-hidden="true">#</a> 1 boolean字面量类型</h2><p>原始类型boolean等同于由true字面量类型和false字面量类型构成的联合类型。即：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">BooleanAlias</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>true 字面量类型只能接受true值 false字面量类型只能接受false</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span><span class="token boolean">true</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b<span class="token operator">:</span><span class="token boolean">false</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>boolean字面量类型（true和false）是boolean类型的子类型，因此可以将boolean字面量类型赋值给boolean类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span><span class="token boolean">true</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b<span class="token operator">:</span><span class="token boolean">false</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> a<span class="token punctuation">;</span>
c <span class="token operator">=</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-string字面量类型" tabindex="-1"><a class="header-anchor" href="#_2-string字面量类型" aria-hidden="true">#</a> 2 string字面量类型</h2><p>字符串字面量和不带参数的模板字符串可以作为string字面量类型。</p><p>string字面量类型是string类型的子类型，因此可以将string字面量类型赋值给string类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b<span class="token operator">:</span><span class="token string">&#39;world&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> c<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> a<span class="token punctuation">;</span>
c <span class="token operator">=</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-数字字面量类型" tabindex="-1"><a class="header-anchor" href="#_3-数字字面量类型" aria-hidden="true">#</a> 3 数字字面量类型</h2><p>数字字面量类型包含两类，不可以相互赋值。</p><ol><li>number字面量类型。</li><li>bigint字面量类型。</li></ol><p>所有正数、负数、二进制、八进制、十进制、十六进制数字字面量都可以作为数字字面量类型。</p><p>number字面量类型和bigint字面量类型分别是number和bigint类型的子类型，因此可以进行赋值操作。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// number</span>
<span class="token keyword">const</span> a<span class="token operator">:</span><span class="token number">0b1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b<span class="token operator">:</span><span class="token number">0o1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c<span class="token operator">:</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> d<span class="token operator">:</span><span class="token number">0x1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> e<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
e <span class="token operator">=</span> a<span class="token punctuation">;</span>
e <span class="token operator">=</span> b<span class="token punctuation">;</span>
e <span class="token operator">=</span> c<span class="token punctuation">;</span>
e <span class="token operator">=</span> d<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// bigint</span>
<span class="token keyword">const</span> a1<span class="token operator">:</span><span class="token number">0b1n</span> <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a2<span class="token operator">:</span><span class="token number">0o1n</span> <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a3<span class="token operator">:</span><span class="token number">1n</span> <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a4<span class="token operator">:</span><span class="token number">0x1n</span> <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> a5<span class="token operator">:</span>bigint<span class="token punctuation">;</span>
a5 <span class="token operator">=</span> a1<span class="token punctuation">;</span>
a5 <span class="token operator">=</span> a2<span class="token punctuation">;</span>
a5 <span class="token operator">=</span> a3<span class="token punctuation">;</span>
a5 <span class="token operator">=</span> a4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-枚举成员字面量类型" tabindex="-1"><a class="header-anchor" href="#_4-枚举成员字面量类型" aria-hidden="true">#</a> 4 枚举成员字面量类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction<span class="token punctuation">{</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>

<span class="token keyword">const</span> left<span class="token operator">:</span>Direction<span class="token punctuation">.</span>Left <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[t];function l(c,i){return s(),a("div",null,o)}const d=n(p,[["render",l],["__file","17字面量类型.html.vue"]]);export{d as default};
