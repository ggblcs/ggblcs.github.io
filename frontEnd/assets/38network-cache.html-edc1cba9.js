import{_ as n,p as a,q as s,a1 as e}from"./framework-96b046e1.js";const t={},o=e(`<h1 id="_38-network-cache" tabindex="-1"><a class="header-anchor" href="#_38-network-cache" aria-hidden="true">#</a> 38 network-cache</h1><p>设自己写好的代码（main.js），引入了自己的工具库<code>tool.js</code>，打包后都以哈希方式命名。当<code>too.js</code>内容改变后，打包后的哈希名会不一样。（浏览器会放弃缓存，重新请求）。<code>main.js</code>内容没变，打包的后的哈希名不应该变（浏览器会使用缓存，节省开支），但<code>main.js</code>打包后的哈希名变了，原因是内部引用的<code>too.js</code>文件名变了，所以<code>main.js</code>引入<code>too.js</code>时，<code>import xxx form xxx </code> 的这句代码变了，导致<code>main.js</code> 内容改变，导致<code>main.js</code> 哈希名改变（浏览器缓存变得没有什么意义）怎么解决？</p><p>让（main.js 保存 tool.js 文件哈希值的部分）单独整理成一个文件，名为runtime（运行时文件），</p><p><code>webpack.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">runtimeChunk</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token parameter">entrypoint</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">runtime~</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entryPoint<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，当 tool.js改变时，只有tool.js 打包后的哈希值会变，runtime 的哈希值会变，main.js 打包的哈希值不会变。</p><p>contenthash 能保证根据文件内容生成哈希值，内容不变，contenthash不变。</p><p>实测：配置后不知为啥没生成runtime~xxx.js文件，查官网也没查明白。</p>`,8),c=[o];function p(i,r){return a(),s("div",null,c)}const d=n(t,[["render",p],["__file","38network-cache.html.vue"]]);export{d as default};
