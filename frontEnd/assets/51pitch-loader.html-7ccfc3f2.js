import{_ as n,p as a,q as s,a1 as t}from"./framework-96b046e1.js";const o={},e=t(`<h1 id="_51-pitch-loader" tabindex="-1"><a class="header-anchor" href="#_51-pitch-loader" aria-hidden="true">#</a> 51 pitch-loader</h1><p>pitch(投，掷)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">functon</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;testA&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> content
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;pitch A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若loader 同为 normal loader 那么他们的执行顺序为：</p><p>前提：<code>use:[&quot;loader1&quot;, &quot;loader2&quot;, &quot;loader3&quot;]</code></p><p>pitch1 -&gt; pitch2 -&gt; pitch3 -&gt; loader3 -&gt; loader2 -&gt; loader1</p><p>若pitch2 中含有return 语句，则执行顺序为</p><p>pitch1 -&gt; pitch2(return) -&gt; loader1</p><p>会跳过pitch2 之后的所有pitch方法，跳过 pitch2 对应的loader2 之间的loader 以及loader2 自身。</p>`,9),p=[e];function c(i,l){return a(),s("div",null,p)}const r=n(o,[["render",c],["__file","51pitch-loader.html.vue"]]);export{r as default};
