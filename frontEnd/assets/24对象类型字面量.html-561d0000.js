import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const e={},t=p(`<h1 id="_24-对象类型字面量" tabindex="-1"><a class="header-anchor" href="#_24-对象类型字面量" aria-hidden="true">#</a> 24 对象类型字面量</h1><p>字面量类型成员</p><p>属性签名(限制对象的value)</p><p>索引前名（限制对象的key）</p><p>调用签名</p><p>构造签名</p><p>方法签名</p><p>各个成员之间既可以用“,”连接，也可以用“;”连接。</p><h2 id="_1-属性签名" tabindex="-1"><a class="header-anchor" href="#_1-属性签名" aria-hidden="true">#</a> 1 属性签名</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// , ; 连接</span>
<span class="token keyword">const</span> objA<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> objB<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span>

<span class="token comment">// 属性签名</span>
<span class="token keyword">let</span> objC<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span>
<span class="token comment">// 可计算属性签名</span>
<span class="token keyword">const</span> c<span class="token operator">:</span><span class="token string">&#39;o&#39;</span> <span class="token operator">=</span> <span class="token string">&quot;o&quot;</span>
<span class="token keyword">let</span> objD<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span>
<span class="token comment">// 可选属性签名</span>
<span class="token keyword">let</span> objE1<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">}</span>
<span class="token comment">// 等价于</span>
<span class="token keyword">let</span> objE2<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token keyword">undefined</span><span class="token punctuation">}</span>
<span class="token comment">// 不允许访问未定义属性</span>
<span class="token keyword">let</span> objF<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">}</span>
<span class="token comment">// objF.y // 报错，y未定义</span>
<span class="token comment">// 只读属性</span>
<span class="token keyword">let</span> objG<span class="token operator">:</span><span class="token punctuation">{</span><span class="token keyword">readonly</span> x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span>

<span class="token comment">// 空对象类型</span>
<span class="token keyword">let</span> objH<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 与Object类型十分相似，可以互换使用</span>

<span class="token comment">// 多余属性</span>
<span class="token comment">// let objI:{x:number} = {x:0, y:0}</span>
<span class="token comment">// y是多余属性，会报错</span>
<span class="token comment">// 启用suppressExcessPropertyErrors能够禁用ts多余属性检查</span>

<span class="token comment">// 使用// @ts-ignore注释指令能禁用针对某一行的类型检查，例如</span>
<span class="token comment">// @ts-ignore</span>
<span class="token keyword">const</span> point<span class="token operator">:</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-索引签名" tabindex="-1"><a class="header-anchor" href="#_2-索引签名" aria-hidden="true">#</a> 2 索引签名</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> p<span class="token operator">:</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token comment">// 索引签名</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span> z<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-调用签名" tabindex="-1"><a class="header-anchor" href="#_3-调用签名" aria-hidden="true">#</a> 3 调用签名</h2><p>函数本质上也是对象，特殊的地方在于函数可调用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用对象类型表示函数类型</span>
<span class="token keyword">let</span> fn1<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用签名的对象类型字面量能更加准确描述函数的类型，因此函数可以拥有自己的属性</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
f<span class="token punctuation">.</span>verson <span class="token operator">=</span> <span class="token number">2.0</span>
<span class="token keyword">let</span> foo<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span>verson<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token operator">=</span> f
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>verson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 ok</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>verson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 ok</span>


<span class="token comment">// 简写形式</span>
<span class="token comment">// 函数类型字面量是仅包含一个类型成员的对象类型字面量的简写形式</span>
<span class="token keyword">let</span> <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
<span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 函数类型字面量无法准确描述函数的类型，因此函数无法使用自己的属性</span>
<span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
g<span class="token punctuation">.</span>verson <span class="token operator">=</span> <span class="token number">2.0</span>
<span class="token keyword">let</span> <span class="token function-variable function">goo</span><span class="token operator">:</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span> <span class="token operator">=</span> g
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>verson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 ok</span>
<span class="token comment">// console.log(goo.verson); // 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-构造签名" tabindex="-1"><a class="header-anchor" href="#_4-构造签名" aria-hidden="true">#</a> 4 构造签名</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 构造函数类型字面量</span>
<span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> Person<span class="token operator">:</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">}</span>
Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> age<span class="token punctuation">;</span> <span class="token comment">// private修饰符只能在ts中使用</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment">// 构造函数类型字面量完全等同于仅包含一个类型成员的对象类型字面量</span>
<span class="token comment">// 即：构造函数类型字面量是仅包含单个构造函数签名的对象类型字面量的简写形式</span>
<span class="token comment">// 所以上面的可简写为：</span>
<span class="token keyword">let</span> PersonA<span class="token operator">:</span><span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","24对象类型字面量.html.vue"]]);export{u as default};
