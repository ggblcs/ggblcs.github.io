import{_ as t,M as p,p as e,q as o,R as n,t as c,N as l,a1 as s}from"./framework-96b046e1.js";const i={},u=s(`<h1 id="_02-react路由" tabindex="-1"><a class="header-anchor" href="#_02-react路由" aria-hidden="true">#</a> 02 -React路由</h1><p>单页应用程序和前端路由</p><hr><h2 id="单页应用简介" tabindex="-1"><a class="header-anchor" href="#单页应用简介" aria-hidden="true">#</a> 单页应用简介</h2><p><strong>SPA</strong>：</p><p><code>Single Page Application</code> 单页面应用程序，即整个应用中只存在一个页面文件（index.html）</p><ul><li>一个应用对应一个html文件(index.html)</li><li>画面的切换依靠的是使用原生的DOM API，不断创建/销毁界面元素</li></ul><p><strong>MPA :</strong></p><p><code>Multiple Page Application</code> 多页面应用程序，即整个应用中会包含很多个页面文件（*.html）</p><ul><li>一个应用由多个 html 文件组成，一个画面对应一个html文件</li><li>画面切花时，需要向服务器请求新的html文件</li></ul><hr><h2 id="单页应用的优点" tabindex="-1"><a class="header-anchor" href="#单页应用的优点" aria-hidden="true">#</a> 单页应用的优点</h2><ol><li><p>能显著加快页面响应速度，降低对服务器的压力</p><ul><li>传统的多页面应用程序，每次请求服务器返回的都是一整个完整的页面</li><li>单页面应用程序只有第一次会加载完整的页面，以后每次请求仅仅获取必要的数据</li></ul></li><li><p>更好的用户体验，运行更加流畅</p></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>images/单页vs多页-16297300974361.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>单页vs多页<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">zoom</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="单页应用的缺点" tabindex="-1"><a class="header-anchor" href="#单页应用的缺点" aria-hidden="true">#</a> 单页应用的缺点</h2><p><strong>不利于 SEO</strong></p><p>因为 “爬虫” 只抓取 HTML 页面中的文本内容，不会执行页面中的 JS 代码，所以不能获得由 JS 动态生成的内容</p><p><strong>SEO解决方案</strong></p><ol><li>通过 SSR（服务端渲染 - Server Side Rendering ）来解决 SEO 问题：先在服务端把内容渲染出来，然后返回给浏览器的就是纯 HTML 内容了</li></ol><ul><li>通过 预渲染 来解决 SEO 问题：将页面都执行一遍，并将渲染后的 HTML 结果保存到静态文件中去。比如，对于一个电商网站，为每件商品生成一个静态的 HTML 页面，这样有利于 SEO</li></ul><hr><h2 id="前端路由介绍" tabindex="-1"><a class="header-anchor" href="#前端路由介绍" aria-hidden="true">#</a> 前端路由介绍</h2><p>现代的前端应用大多都是 SPA（单页应用程序），因为它的用户体验更好、对服务器的压力更小，所以更受欢迎。</p><p>为<strong>有效使用单个页面来管理原来多页面的功能，前端路由应运而生</strong>。</p><p>前端路由的功能：让用户从一个视图（页面）导航到另一个视图（页面）</p><ul><li>前端路由是一套<strong>映射规则</strong>，在React中，是 <em>URL路径</em> 与 <em>组件</em> 的对应关系</li><li>使用 React 路由简单来说就是：配置路径和组件（配对）</li></ul><p>!---<a href="images/%E8%B7%AF%E7%94%B1%E6%98%AF%E4%B8%80%E5%A5%97%E8%A7%84%E5%88%991-16297300974362.png">路由是一套规则1</a> !---<a href="images/%E8%B7%AF%E7%94%B1%E6%98%AF%E4%B8%80%E5%A5%97%E8%A7%84%E5%88%992-16297300974363.png">路由是一套规则2</a></p><hr><h2 id="实现一个简单的-hash-路由" tabindex="-1"><a class="header-anchor" href="#实现一个简单的-hash-路由" aria-hidden="true">#</a> 实现一个简单的 Hash 路由</h2><p>我们可以通过监听 window 对象的 <code>hashchange</code> 事件：当浏览器的地址栏中的 URL 地址 hash 值发生了改变，就会触发该事件。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;./pages/Home&#39;</span>
<span class="token keyword">import</span> Search <span class="token keyword">from</span> <span class="token string">&#39;./pages/Search&#39;</span>
<span class="token keyword">import</span> Comment <span class="token keyword">from</span> <span class="token string">&#39;./pages/Comment&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>current<span class="token punctuation">,</span> setCurrent<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setCurrent</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* 导航链接 */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">首页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/comment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">评论</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/search<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">搜索</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      
      </span><span class="token punctuation">{</span><span class="token comment">/* 根据 hash 值，对组件进行条件渲染 */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span>current <span class="token operator">===</span> <span class="token string">&#39;/home&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span>current <span class="token operator">===</span> <span class="token string">&#39;/search&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span>current <span class="token operator">===</span> <span class="token string">&#39;/comment&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Comment</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="使用路由库实现路由功能" tabindex="-1"><a class="header-anchor" href="#使用路由库实现路由功能" aria-hidden="true">#</a> 使用路由库实现路由功能</h2><p><strong>官网：</strong></p><ul><li><p>v6：https://reactrouter.com/</p></li><li><p>v5：https://v5.reactrouter.com/</p></li></ul>`,36),r={href:"https://reactrouter.com/docs/en/v6/faq",target:"_blank",rel:"noopener noreferrer"},k=s(`<p><strong>基本使用步骤：</strong></p><ol><li>安装 v5 版本的 <code>react-router</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn add react<span class="token operator">-</span>router<span class="token operator">-</span>dom@<span class="token number">5.3</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>react-router-dom</code> 这个包提供了三个核心的组件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>使用<code>HashRouter</code>包裹整个应用，一个项目中只会有一个Router</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>HashRouter<span class="token operator">&gt;</span>
  	<span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span> 
	<span class="token operator">&lt;</span><span class="token operator">/</span>HashRouter<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  
  <span class="token comment">//...</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>使用Link指定导航链接</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/first&quot;</span><span class="token operator">&gt;</span>页面一<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/two&quot;</span><span class="token operator">&gt;</span>页面二<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>使用<code>Route</code>指定路由规则</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在哪里写的Route,最终匹配到的组件就会渲染到这</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/first&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>First<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="router-组件" tabindex="-1"><a class="header-anchor" href="#router-组件" aria-hidden="true">#</a> Router 组件</h2><p>Router 组件用于包裹整个应用，为整个应用提供路由管理。</p><p>注意：一个 React 应用只需要使用一次 Router 组件即可。</p><p><strong>两种常用的 Router：</strong></p><ol><li>HashRouter：</li></ol><ul><li><p>使用 URL 的哈希值实现</p></li><li><p>URL 形式：http://localhost:3000/#/first</p></li><li><p>原理：监听 window 的 <code>hashchange</code> 事件来实现的</p></li></ul><ol start="2"><li>BrowserRouter：</li></ol><ul><li><p>使用 H5 的 <code>history.pushState()</code> 和 <code>history.replaceState()</code> API 实现</p></li><li><p>URL 形式：http://localhost:3000/first</p></li><li><p>原理：监听 window 的 <code>popstate</code> 事件来实现的</p></li></ul><p><strong>导入 Router 的推荐写法</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  ...
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="route-组件" tabindex="-1"><a class="header-anchor" href="#route-组件" aria-hidden="true">#</a> Route 组件</h2><p>作用：对当前浏览器的路径进行匹配，匹配成功则渲染指定的界面内容</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span><span class="token comment">/* 如果 path 是 &#39;/&#39;, 能够匹配到任意的路径，需要加上 exact 属性 */</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exact</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/comment<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Comment<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/search<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Search<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span>

<span class="token punctuation">{</span><span class="token comment">/* 没有指定 path，则表示它总是能被匹配到 */</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>path 属性</strong></p><ul><li>如果 path 值与浏览器路径相匹配，就渲染 component 或标签体指定的组件</li><li>如果 path 没匹配上，那么什么都不渲染</li><li>如果 path 没有指定，那总是渲染 component 或标签体指定的组件</li><li>注意：默认情况下，任何页面路径都会被 <code>path=&quot;/&quot;</code>的 Route 匹配到</li></ul><p><strong>exact 属性</strong></p><ul><li><p>设置 exact 属性后，表示该 Route 匹配路径时实行的是精确匹配</p></li><li><p>注意：一般来说如果路径配置了<code>path=&quot;/&quot;</code>，则都需配置 <code>exact</code> 属性</p></li></ul><hr><h2 id="switch-组件" tabindex="-1"><a class="header-anchor" href="#switch-组件" aria-hidden="true">#</a> Switch 组件</h2><p>如果把 <code>Route</code> 组件包裹在<code>Switch</code>组件中，它的效果是：</p><ul><li>不管 <code>Switch</code>组件中有多少个路由规则能被匹配，最终都只会渲染第一个匹配到的组件</li><li>通过<code>Switch</code>组件，能非常容易的实现 404 错误页面</li></ul><p>[v5的做法]</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/user&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[v6的做法]</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">About</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">User</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NoMatch</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="声明式导航" tabindex="-1"><a class="header-anchor" href="#声明式导航" aria-hidden="true">#</a> 声明式导航</h2><p>用于完成声明式导航的组件：Link、NavLink</p><p><strong><code>Link</code></strong></p><ul><li>最终会渲染成 <code>&lt;a&gt;</code> 标签</li></ul><ul><li><code>to</code> 属性，将来会渲染成a标签的href属性</li><li><code>Link</code> 组件无法实现导航的高亮效果</li></ul><p><strong><code>NavLink</code></strong></p><ul><li>一个加强版 <code>Link</code>组件，能实现当前导航的高亮</li><li><code>to</code> 属性，用于指定地址，会渲染成a标签的href属性</li><li><code>activeClassName</code>: 用于指定高亮的类名，默认<code>active</code></li><li><code>exact</code>: 精确匹配，表示必须精确匹配类名才生效</li></ul><hr><h2 id="编程式导航" tabindex="-1"><a class="header-anchor" href="#编程式导航" aria-hidden="true">#</a> 编程式导航</h2><p>问题场景：点击登录按钮，等登录成功之后，通过代码跳转到后台管理首页，如何实现？</p><p>编程式导航：即通过 JS 代码来实现页面跳转</p><p>在 React Router 中，实现编程式路由导航功能，主要依靠 <code>history</code> 对象：</p><ul><li><code>history</code> 对象：是 React 路由提供的，用于获取浏览器历史记录的相关信息</li><li><code>push(path)</code> 方法：跳转到某个页面，参数 path 表示要跳转的路径</li><li><code>go(n)</code> 方法： 前进或后退到某个页面，参数 n 表示前进或后退页面数量（比如：-1 表示后退到上一页）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果使用js代码的方式实现路由的跳转----》编程式导航</span>
<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;地址&#39;</span><span class="token punctuation">)</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span>  前进和后退
history<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;地址&#39;</span><span class="token punctuation">)</span> 跳转，，会替换当前的记录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由" aria-hidden="true">#</a> 嵌套路由</h2><p>在 React 中，配置嵌套路由非常的简单，因为<code>Route</code>就是一个组件，可以放在任意想根据路由地址显示内容的地方</p><p>但配置嵌套路由时，需要注意路径的写法，必须要让父级路由能匹配到，才能继续匹配子路由</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/find/top&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Top<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/find/list&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>List<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由" aria-hidden="true">#</a> 动态路由</h2><p><strong>动态路由参数的定义：</strong></p><p>使用<code>:id</code>的方式来配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以匹配 /users/1  /users/2  /users/xxx</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/users/:id&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Users<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动态路由参数的获取：</strong></p><p>在 类组件 中通过 <code>props</code> 接收到动态路由参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 函数 组件中通过 <code>useParams</code> Hook 函数获取动态路由参数</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,68);function d(v,g){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[c("V5 迁移 V6 的 FAQ 帮助"),l(a)])]),k])}const h=t(i,[["render",d],["__file","02-React路由.html.vue"]]);export{h as default};
