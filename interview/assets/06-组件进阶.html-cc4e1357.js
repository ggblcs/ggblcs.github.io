import{_ as e,M as o,p as c,q as i,R as n,t,N as p,a1 as s}from"./framework-96b046e1.js";const l={},u=s(`<h1 id="_06-组件进阶" tabindex="-1"><a class="header-anchor" href="#_06-组件进阶" aria-hidden="true">#</a> 06 -组件进阶</h1><hr><h2 id="对-props-进行校验" tabindex="-1"><a class="header-anchor" href="#对-props-进行校验" aria-hidden="true">#</a> 对 props 进行校验</h2><p>**目标：**限制 props 能接收的数据类型，提高组件健壮性</p><p><strong>内容：</strong></p><p>对组件来说 props 是外来的数据，无法保证调用组件的人一定传入正确格式的数据。</p><p>如果传入的数据格式不对，很可能导致组件内部执行错误。</p><p><strong>且组件调用者也不知道为什么会出错。</strong></p><p>比如，下面是 <code>程序员A</code> 创建的一个组件：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">List</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 期望：一个字符串数组</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> props<span class="token punctuation">.</span>colors
  
  <span class="token keyword">const</span> list <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，它被<code>程序员B</code> 使用了：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 实际：传入了数字</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">colors</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方法：</strong></p><p>我们可以使用 <code>组件名.propTypes = {}</code> ，来给当前组件的 props 设置校验规则。</p><p>具体做法：</p><ol><li><p>导入 <code>prop-types</code> 包</p></li><li><p>校验规则通过 <code>PropTypes</code> 对象来指定(类组件类型校验与下面写法相同)</p></li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>colors<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注意，以下代码是写在组件代码的外面的，不要写错地方了！</span>
<span class="token comment">// 为 App 组件设置 props 校验规则</span>
App<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 约定 colors 属性为数组类型。如果调用组件时类型不对，则会报出明确错误，便于分析错误原因</span>
  <span class="token literal-property property">colors</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>array
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><ul><li>通过 props 校验，能够增强组件的健壮性</li></ul><hr><h2 id="对-props-进行校验-常用校验规则" tabindex="-1"><a class="header-anchor" href="#对-props-进行校验-常用校验规则" aria-hidden="true">#</a> 对 props 进行校验-常用校验规则</h2><p>**目标：**了解 prop-types 提供的更多校验规则</p>`,22),r={href:"https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>常见类型：</p><ul><li><p><code>array</code> - 数组</p></li><li><p><code>bool</code> - 布尔</p></li><li><p><code>func</code> - 函数</p></li><li><p><code>number</code> - 数字</p></li><li><p><code>object</code> - 对象</p></li><li><p><code>string</code> - 字符串</p></li><li><p><code>element</code> - React 元素</p></li></ul><p>必填限定修饰：</p><ul><li><code>类型.isRequired</code></li></ul><p><strong>核心代码</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 常见类型</span>
<span class="token literal-property property">optionalFunc</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>
  
<span class="token comment">// 必填限定</span>
<span class="token literal-property property">requiredFunc</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="为-props-设置默认值" tabindex="-1"><a class="header-anchor" href="#为-props-设置默认值" aria-hidden="true">#</a> 为 props 设置默认值</h2><p>**目标：**为 props 设置默认值</p><p>通过 <code>组件名.defaultProps</code> ，能为组件 props 设置默认值，以便在未传入 <code>props</code> 时有初始值。</p><p><strong>核心代码：</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      此处展示props的默认值：</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>pageSize<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置 App 组件的 props 默认值</span>
App<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>

<span class="token comment">// 不传入pageSize属性</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token attr-name">pageSize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong></p><p>当我们后面学习和使用 TypeScript 进行 React 开发后，以上学到的 props 校验和默认值的设置功能，就不再需要了，它被 TypeScript 的类型校验和默认值机制所取代。</p></blockquote><hr><h2 id="优化校验和默认值写法" tabindex="-1"><a class="header-anchor" href="#优化校验和默认值写法" aria-hidden="true">#</a> 优化校验和默认值写法</h2><p>**目标：**通过类的 static 语法来优化<code>类组件</code>的 props 校验和默认值写法</p><p><strong>关于 class 类的知识</strong></p><ul><li>实例成员：通过创建出的实例才能调用的属性或方法</li><li>静态成员：通过类或构造函数本身才能访问的属性或者方法</li></ul><p><strong>核心代码</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实例成员</span>
  name <span class="token operator">=</span> <span class="token string">&#39;zs&#39;</span>

  <span class="token comment">// 静态成员</span>
  <span class="token keyword">static</span> age <span class="token operator">=</span> <span class="token number">18</span>

  <span class="token comment">// 实例成员</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;哈哈&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 静态成员</span>
  <span class="token keyword">static</span> <span class="token function">goodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;byebye&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 创建实例，并访问实例成员</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// 访问静态成员</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
Person<span class="token punctuation">.</span><span class="token function">goodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，类组件中设置校验和默认值可改写为：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// 校验</span>
  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">colors</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>array
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 默认值</span>
  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>colors<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>static: 为类本身添加属性/方法 , 又称为静态属性, 区别于实例属性</p><hr><h2 id="组件生命周期-概述" tabindex="-1"><a class="header-anchor" href="#组件生命周期-概述" aria-hidden="true">#</a> 组件生命周期-概述</h2><p>**目的：**能够理解什么是组件的生命周期，及为什么需要研究组件的生命周期</p><p><strong>什么是生命周期？</strong></p><p>即一个事物从创建到最后消亡经历的整个过程</p><p>!---<a href="images/%E4%BA%BA%E4%B8%80%E7%94%9F%E7%BC%A9%E5%BD%B1.png">人一生缩影</a></p><p><strong>什么是组件的生命周期？</strong></p><p>组件从被创建、到挂载到页面中运行、再到不用时被卸载的整个过程</p><p><strong>了解组件生命周期的意义是什么？</strong></p><p>了解组件的生命周期，有助于更好的理解组件的运行方式、以及分析组件出错时的原因等</p><p><strong>什么是钩子函数？</strong></p><p>为开发人员在组件运行的不同阶段，来操作组件而预留的时机。</p><p><strong>【面试小知识】只有 “类组件” 才有真正的生命周期。</strong></p><hr><h2 id="组件生命周期-整体说明" tabindex="-1"><a class="header-anchor" href="#组件生命周期-整体说明" aria-hidden="true">#</a> 组件生命周期-整体说明</h2><p>**目标：**能够说出组件生命周期总共有几个阶段。</p>`,39),k={href:"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>!---<a href="images/image-20211105104421145.png">image-20211105104421145</a></p><hr><h2 id="组件生命周期-挂载阶段" tabindex="-1"><a class="header-anchor" href="#组件生命周期-挂载阶段" aria-hidden="true">#</a> 组件生命周期-挂载阶段</h2><p>**目标：**能够说出组件的挂载阶段的钩子函数以及执行时机</p><p><strong>执行时机：</strong></p><p>组件创建时（页面加载时）</p><p><strong>执行顺序：</strong></p><p>!---<a href="images/%E7%BB%84%E4%BB%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png"></a></p><table><thead><tr><th>钩子 函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>constructor</td><td>创建组件时，最先执行</td><td>1. 发送网络请求 2. 初始化state 3. 创建Ref等</td></tr><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染UI（注意不要调用setState）</td></tr><tr><td>componentDidMount</td><td>组件挂载（完成DOM渲染）后</td><td>1. 发送网络请求 2.DOM操作</td></tr></tbody></table><hr><h2 id="组件生命周期-更新阶段" tabindex="-1"><a class="header-anchor" href="#组件生命周期-更新阶段" aria-hidden="true">#</a> 组件生命周期-更新阶段</h2><p>**目标：**能说出组件的更新阶段的钩子函数、及执行时机</p><p><strong>执行时机：</strong></p><p>以下任意一种情况都会触发组件进行重新渲染：</p><ol><li>当组件接收到新的 <code>props</code> 时</li><li>当调用修改状态的方法时：<code>setState() </code></li><li>当调用强制更新方法时：<code>forceUpdate() </code></li></ol><p><strong>执行顺序</strong></p><p>!---<a href="images/%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5.png"></a></p><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染UI（与 挂载阶段 是同一个render）</td></tr><tr><td>componentDidUpdate</td><td>组件更新后（完成DOM渲染）</td><td>DOM操作，可以获取到更新后的DOM内容，不要直接调用setState</td></tr></tbody></table><hr><h2 id="组件生命周期-卸载阶段" tabindex="-1"><a class="header-anchor" href="#组件生命周期-卸载阶段" aria-hidden="true">#</a> 组件生命周期-卸载阶段</h2><p>**目标：**能说出组件销毁阶段的钩子函数及执行时机</p><p><strong>执行时机：</strong></p><p>组件被从页面中移除（消失）</p><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>componentWillUnmount</td><td>组件卸载（从页面中消失）</td><td>执行清理工作（比如：清理定时器等）</td></tr></tbody></table><hr><h2 id="b站评论列表案例-本地数据存储" tabindex="-1"><a class="header-anchor" href="#b站评论列表案例-本地数据存储" aria-hidden="true">#</a> B站评论列表案例-本地数据存储</h2><p><strong>目标</strong>：实现B站评论列表数据的持久化</p><p><strong>步骤</strong>：</p><ol><li>在组件挂载的钩子函数中，从本地存储中读取 list 数据</li><li>将获取的 list 数据放入状态中</li><li>在组件更新的钩子函数中，将最新的 list 数据存到本地存储中</li></ol><p><strong>核心代码</strong>：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 组件初次挂载后，读取本地数据</span>
<span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;[]&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> list <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 组件发生重新渲染后，将列表数据存入本地</span>
<span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="setstate进阶-延迟更新" tabindex="-1"><a class="header-anchor" href="#setstate进阶-延迟更新" aria-hidden="true">#</a> setState进阶-延迟更新</h2><p><strong>目的</strong>：能够理解 setState 延迟更新数据的特征</p><p>setState 方法本身是同步的，但它所表现出来的行为是延迟更新状态（<strong>但并不是异步更新</strong>）</p><p><strong>setState 延迟更新状态的说明：</strong></p><ul><li><p>调用 setState 时，将需要更新的状态对象放到一个更新队列中暂存起来（没有立即更新）</p></li><li><p>如果多次调用 setState 来更新状态，此时 <strong>状态会被合并，以后面的状态覆盖前面的状态</strong></p></li><li><p>等到所有操作都执行完毕，React 会拿到最终的状态，然后触发组件的更新渲染</p></li></ul><p><strong>这种机制的优势：</strong></p><p>多次调用 setState() 只会触发一次重新渲染，提升性能。（类似防抖的效果）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 结果是多少？</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="setstate进阶-推荐语法" tabindex="-1"><a class="header-anchor" href="#setstate进阶-推荐语法" aria-hidden="true">#</a> setState进阶-推荐语法</h2><p>**目标：**能掌握 setState 箭头函数的语法，解决多次调用依赖的问题</p><p>推荐使用 <code>setState((preState) =&gt; {})</code> 语法</p><ul><li>参数 <code>preState</code>: 会把上一个 <code>setState</code> 的执行结果传入该函数参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> preState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> preState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 结果是多少？</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：这种语法内部依旧是延迟更新，但会在最后一次调用 setState 后，会对之前所有 setState 回调函数进行集中计算。</strong></p><p><strong>该新语法适用于需要关注状态的每一个变化过程的场景；而老语法则适用于只关注最终结果的场景。</strong></p><hr><h2 id="setstate进阶-第二个参数" tabindex="-1"><a class="header-anchor" href="#setstate进阶-第二个参数" aria-hidden="true">#</a> setState进阶-第二个参数</h2><p>**目标：**能够使用 setState 的第二个参数（回调函数），来操作渲染后的真实 DOM</p><p>场景：在状态更新并完成重新渲染后，立即执行某个需要操作最新的真实 DOM 的行为</p><p>语法：<code>setState(updater[, callback])</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>
  <span class="token comment">// 参数一</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 参数二</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这个回调函数会在状态更新后立即执行&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="setstate进阶-同步-异步" tabindex="-1"><a class="header-anchor" href="#setstate进阶-同步-异步" aria-hidden="true">#</a> setState进阶-同步？异步？</h2><p>**目标：**能够说出 setState 到底是同步的还是异步</p><p>**setState 是同步的。**但由于 React 本身的性能优化机制：会将多个 <code>setState</code> 合并为一个来执行（想象成“防抖”），所以有时它会表现出类似异步的行为。</p><p>“同步”/“异步” 行为的场景说明：</p><ul><li>在 <code>生命周期钩子函数</code>或 <code>事件处理函数</code> 中被调用，表现为 <strong>“异步”</strong></li><li>在 <code>setTimeout/setInterval</code> 或 <code>原生事件监听函数</code>中被调用，表现为 <strong>同步</strong></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>注意 React 18 版本中的差异：所有以上场景下都是表现出“异步”的行为
<span class="token list punctuation">-</span> 注意使用 createRoot() 才是真正的 18 模式运行
<span class="token list punctuation">-</span> 而在 React 18 中使用 ReactDOM.render() 它仍以 17 模式运行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><ul><li><p>setState 是同步方法，但是由于性能优化原因，表现得像异步</p></li><li><p>参考链接：</p><ul><li><p>https://zhuanlan.zhihu.com/p/158725289</p></li><li><p>https://zhuanlan.zhihu.com/p/78516581</p></li></ul></li></ul>`,63);function m(b,g){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[t("【官网文档】"),p(a)])]),d,n("p",null,[n("a",k,[t("http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/"),p(a)])]),v])}const y=e(l,[["render",m],["__file","06-组件进阶.html.vue"]]);export{y as default};
