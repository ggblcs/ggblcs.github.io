import{_ as a,p as n,q as s,a1 as e}from"./framework-96b046e1.js";const r={},t=e(`<h1 id="堆栈和垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#堆栈和垃圾回收机制" aria-hidden="true">#</a> 堆栈和垃圾回收机制</h1><h3 id="栈内储存" tabindex="-1"><a class="header-anchor" href="#栈内储存" aria-hidden="true">#</a> 栈内储存</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b<span class="token operator">=</span>a<span class="token punctuation">;</span>
a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//此时b=4；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="堆栈储存" tabindex="-1"><a class="header-anchor" href="#堆栈储存" aria-hidden="true">#</a> 堆栈储存</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj1<span class="token operator">=</span>obj<span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">//此时obj1.a=20;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="堆栈溢出" tabindex="-1"><a class="header-anchor" href="#堆栈溢出" aria-hidden="true">#</a> 堆栈溢出</h3><p>当存储的数据达到某一极限是就会造成堆栈溢出</p><h3 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏" aria-hidden="true">#</a> 内存泄漏</h3><p>当不断向堆中存储数据，而不进行清理，这就是内存泄漏。</p><h3 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制" aria-hidden="true">#</a> 垃圾回收机制</h3><h4 id="自动清理" tabindex="-1"><a class="header-anchor" href="#自动清理" aria-hidden="true">#</a> 自动清理</h4><p>垃圾回收机制就是将引用堆中的栈对象设置为null，并且将所有引用该地址的对象都设置为null。不会即时清除，垃圾回收车会根据内存使用情况在适当的时候清除堆中的1孤儿对象。</p><blockquote><p>obj=null</p></blockquote><h4 id="手动清理" tabindex="-1"><a class="header-anchor" href="#手动清理" aria-hidden="true">#</a> 手动清理</h4>`,14),p=[t];function o(i,c){return n(),s("div",null,p)}const d=a(r,[["render",o],["__file","04堆栈和垃圾回收机制.html.vue"]]);export{d as default};
