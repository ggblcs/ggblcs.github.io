import{_ as a,p as e,q as h,a1 as r}from"./framework-96b046e1.js";const d={},i=r('<p>[TOC]</p><h3 id="类与对象" tabindex="-1"><a class="header-anchor" href="#类与对象" aria-hidden="true">#</a> 类与对象</h3><h4 id="类的修饰符" tabindex="-1"><a class="header-anchor" href="#类的修饰符" aria-hidden="true">#</a> 类的修饰符</h4><p>1.public可被任意对象访问</p><p>2.abstract抽象类，没有实现方法，需要子类提供方法的实现</p><p>3.final最终类或非继承类，不能被继承</p><p>4.缺省，只有在同包中才能使用该类</p><h4 id="成员变量修饰符" tabindex="-1"><a class="header-anchor" href="#成员变量修饰符" aria-hidden="true">#</a> 成员变量修饰符</h4><p>1.public 公共访问控制符，可被任意对象访问</p><p>2.private 私有访问控制符，只允许自己的类的方法访问，子类也不能访问</p><p>3.protected 保护访问控制符 ，只允许他自己的类、子类、同一包中的类访问。</p><p>4.缺省 同一包中的其他类可以访问</p><p>5.final 最终修饰符，变量值不能改变。</p><p>6.static 静态修饰符，指定该变量被所有对象共享，所有的实例都可以使用该变量。</p><h4 id="成员方法修饰符" tabindex="-1"><a class="header-anchor" href="#成员方法修饰符" aria-hidden="true">#</a> 成员方法修饰符</h4><h4 id="对象的创建及使用" tabindex="-1"><a class="header-anchor" href="#对象的创建及使用" aria-hidden="true">#</a> 对象的创建及使用</h4><h4 id="参数的传递" tabindex="-1"><a class="header-anchor" href="#参数的传递" aria-hidden="true">#</a> 参数的传递</h4><p>加了私有访问控制符该如何修改变量？</p><h4 id="有返回值的方法与没有返回值的方法" tabindex="-1"><a class="header-anchor" href="#有返回值的方法与没有返回值的方法" aria-hidden="true">#</a> 有返回值的方法与没有返回值的方法</h4><h4 id="匿名对象" tabindex="-1"><a class="header-anchor" href="#匿名对象" aria-hidden="true">#</a> 匿名对象</h4><h3 id="java三大特性" tabindex="-1"><a class="header-anchor" href="#java三大特性" aria-hidden="true">#</a> java三大特性</h3><h4 id="_1-封装" tabindex="-1"><a class="header-anchor" href="#_1-封装" aria-hidden="true">#</a> 1.封装</h4><h4 id="_2-继承" tabindex="-1"><a class="header-anchor" href="#_2-继承" aria-hidden="true">#</a> 2.继承</h4><h4 id="_3-多态" tabindex="-1"><a class="header-anchor" href="#_3-多态" aria-hidden="true">#</a> 3.多态</h4><h5 id="_1-方法的重载" tabindex="-1"><a class="header-anchor" href="#_1-方法的重载" aria-hidden="true">#</a> 1.方法的重载</h5><p>方法的重载是实现多态的一种方法法，有一些方法的含义相同，但带有<strong>不同的参数</strong>，这些方法使用<strong>相同的名字</strong></p><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><p>1.如何从一个静态方法中调用另一个静态方法？</p><p>通过this关键词</p><h3 id="继承、抽象类、接口" tabindex="-1"><a class="header-anchor" href="#继承、抽象类、接口" aria-hidden="true">#</a> 继承、抽象类、接口</h3>',30),n=[i];function t(c,s){return e(),h("div",null,n)}const o=a(d,[["render",t],["__file","02考核.html.vue"]]);export{o as default};
