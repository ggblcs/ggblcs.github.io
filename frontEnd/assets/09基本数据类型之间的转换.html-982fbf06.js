import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const t={},p=e(`<h1 id="_09-基本数据类型之间的转换" tabindex="-1"><a class="header-anchor" href="#_09-基本数据类型之间的转换" aria-hidden="true">#</a> 09 基本数据类型之间的转换</h1><h2 id="_01-转换为string类型" tabindex="-1"><a class="header-anchor" href="#_01-转换为string类型" aria-hidden="true">#</a> 01 转换为String类型</h2><ol><li>Number到 String</li><li>Boolean到String</li><li>undefined到String</li><li>Null到String</li></ol><ul><li><p>法1：使用toString方法，例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：以返回值的形式转换，不会影响到原来的数据的数据类型<br><strong>注意点</strong></p><pre><code>   1. 不能使用常量直接调用toString()方法，因为常量是不能被的改变的。
      例如 \` 123.toString() \` 会报错。
        2. 法一只适用于 1和2两种转换，否则会报错，报错例子：
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value1 <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token number">1</span><span class="token comment">//不会报错</span>
<span class="token keyword">let</span> res1 <span class="token operator">=</span> Value1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment">//会报错</span>
<span class="token keyword">let</span> value2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//不会报错</span>
<span class="token keyword">let</span> res2 <span class="token operator">=</span> Value2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    
- 法2：使用Sting(常量or变量)
    例：
    \`\`\`JavaScript
    let value1 = undefined;
    let str1 = String(value1);//成功
    let value2 = null
    let str2 = Strig(value2); //成功
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>法2与法一相比，可直接转常量为字符串，还可直接转null和undefined为字符串</p><ul><li>法3：变量or常量+“ “ / 变量or常量+&#39; &#39;</li></ul><h2 id="_02-转换为number类型" tabindex="-1"><a class="header-anchor" href="#_02-转换为number类型" aria-hidden="true">#</a> 02 转换为Number类型</h2><ol><li>将String类型转换为Number类型。</li><li>将Boolean类型转换为Number类型。</li><li>将undefined类型转换为Number类型</li><li>将null类型转换为Number类型。</li></ol><ul><li><p>法1：使用Number(变量or常量)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意点</strong></p><ol><li><p>如果字符串中没有数据，那么转换的结果是0.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//无内容，转换后是0 </span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;  &quot;</span><span class="token punctuation">;</span>  <span class="token comment">//空格，转换后是0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>let str = &quot;我&quot;;</code>，转换后结果是NaN.</p></li><li><p>如果是布尔类型的true，转换后结果是1.</p></li><li><p>如果是布尔类型的false，转换后结果是0.</p></li><li><p>如果是空类型，转换后结果是0，</p></li><li><p>如果是未定义类型，转换后结果是NaN。 <strong>总结</strong></p></li><li><p>空字符串（含和不含空格）、布尔类型false、空类型，转换为数字类型后为0.</p></li><li><p>布尔类型true转换为数字类型后为1.</p></li><li><p>非空字符串、未定义类型转换为数字后为NaN。</p></li></ol></li><li><p>法2：通过数学运算中的“+”或“-”来转换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token operator">+</span>str<span class="token punctuation">;</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token operator">-</span>str<span class="token punctuation">;</span> <span class="token comment">//正负号发生改变。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>本质上，“+”或“-”转换就是调用了Number（）函数。</li><li>变量，常量，null，undefined都可以转换。</li></ul></li></ul><p>法1（通过Number（））和法2（通过“+”和“-”）都有一个明显的缺点，那就是对于“123我是”的字符串只能转换为number类型的NaN，而不能提取数字。</p><ul><li><p>法3通过parseInt(需要转换的字符串)转换</p></li><li><p>法3通过parseFloat(需要转换的字符串)转换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;3.14是圆周率&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意点</strong></p><ol><li><p>parseInt/parseFloat都会从左到右提取数值，一旦遇到非数值就会停止。</p></li><li><p>如果第一个字符就是非数字，提取就停止了，那么就会返回NaN。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;a3.14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>parseInt/parseFloat都会将传入的数据当成字符串处理，例如传入的是false和true就会当成字符串转化为NaN，而不会转换为0和1。<code>parseInt(&quot;true&quot;);</code>和<code>parseInt(true);</code>等价转为NaN。</p></li></ol></li></ul><h2 id="_03-转换为布尔类型" tabindex="-1"><a class="header-anchor" href="#_03-转换为布尔类型" aria-hidden="true">#</a> 03 转换为布尔类型</h2><pre><code>  1. 将String转换为Boolean类型。
  2. 将Number转换为Boolean类型。
  3. 将undefined转换为Boolean类型。
  4. 将null转换为Boolean类型。
     方法：调用Boolean(变量or常量);
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;   &quot;</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><pre><code>  1. 只要字符串中有内容（空格也算内容），就会转换为true。
  2. 只要数字不是0就会转换为true。
  3. NaN也是number类型，但会转换为false。
  4. null和undefined也会转换为false。
     **再总结**
  5. 空字符串（不含空格） / 0 / NaN / null / undefined 都会转换为false，其余都会转换为true。
</code></pre>`,17),l=[p];function o(i,r){return s(),a("div",null,l)}const u=n(t,[["render",o],["__file","09基本数据类型之间的转换.html.vue"]]);export{u as default};
