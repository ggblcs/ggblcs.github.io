import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const p={},t=e(`<h1 id="_025-类型断言" tabindex="-1"><a class="header-anchor" href="#_025-类型断言" aria-hidden="true">#</a> 025 类型断言</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
TS中的类型断言和其它编程语言的类型转换很像, 可以将一种类型强制转换成另外一种类型
类型断言就是告诉编译器, 你不要帮我们检查了, 相信我，我知道自己在干什么。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>经过我的测试事实上没有类型只是一种声明，并没有实质上的改变数据类型：</p><h2 id="_1-t-类型断言" tabindex="-1"><a class="header-anchor" href="#_1-t-类型断言" aria-hidden="true">#</a> 1 <code>&lt;T&gt;</code>类型断言</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> userName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取html</span>
<span class="token comment">// userName.value // error, ts不知道username是啥，更不知道username有value属性</span>
<span class="token punctuation">(</span><span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span>userName<span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token comment">// ok 获取输入框的value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-as-t类型断言" tabindex="-1"><a class="header-anchor" href="#_2-as-t类型断言" aria-hidden="true">#</a> 2 as T类型断言</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// as T 与&lt;T&gt; 在功能上完全相同，只是语法有区别</span>
<span class="token comment">// 最初ts中只支持&lt;T&gt;类型断言，后来React团队发现与JSX语法有冲突，所以新增了as类型断言</span>
<span class="token keyword">const</span> username2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>username2 <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-类型断言的约束" tabindex="-1"><a class="header-anchor" href="#_3-类型断言的约束" aria-hidden="true">#</a> 3 类型断言的约束</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// as T类型断言和&lt;T&gt;类型断言如果想要成功执行，需要满足一定条件：</span>
<span class="token comment">// expr as T需要满足expr表达式的类型能够赋值给T类型</span>
<span class="token comment">// 或者T类型能够赋值给expr表达式的类型。</span>
<span class="token comment">// 如果两个类型之间没有关联，那么编译器拒绝执行类型断言。</span>
<span class="token comment">// let a:boolean = &#39;hello&#39; as boolean // error</span>

<span class="token comment">// 如果两个复杂类型之间进行类型转换时，编译器无法识别出正确的类型，错误的拒绝了类型断言操作。</span>
<span class="token comment">// 又或者某些特殊原因需要进行强制类型转换，可以先将类型转换为unknown或any，再转为目标类型</span>
<span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token builtin">boolean</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-const类型断言" tabindex="-1"><a class="header-anchor" href="#_4-const类型断言" aria-hidden="true">#</a> 4 const类型断言</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 将某一种类型转换为不可变类型。</span>
<span class="token comment">// expr as const 和 &lt;const&gt;expr</span>
<span class="token comment">/*
expr 要求是以下类型中的一种
boolean字面量
string字面量
number字面量
bigint字面量
枚举成员字面量
数组字面量
对象字面量
*/</span>
<span class="token comment">/*
如果为 boolean字面量 string字面量 number字面量 bigint字面量 枚举成员字面量 类型，
转换后的结果类型为对应的字面量类型。
*/</span>
<span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// boolean 类型</span>
<span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// true类型</span>
<span class="token keyword">let</span> a3 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token comment">// string</span>
<span class="token keyword">let</span> a4 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// hello</span>
<span class="token keyword">let</span> a5 <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// number</span>
<span class="token keyword">let</span> a6 <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// 0</span>
<span class="token keyword">let</span> a7 <span class="token operator">=</span> <span class="token number">1n</span> <span class="token comment">// bigint</span>
<span class="token keyword">let</span> a8 <span class="token operator">=</span> <span class="token number">1n</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// 1n</span>
<span class="token keyword">enum</span> Foo <span class="token punctuation">{</span> <span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> a9 <span class="token operator">=</span> Foo<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token comment">// Foo</span>
<span class="token keyword">let</span> a0 <span class="token operator">=</span> Foo<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// Foo.x</span>
<span class="token comment">// 如果expr为数组字面量，转换后为只读元组类型</span>
<span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// number []</span>
<span class="token keyword">let</span> b2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// readonly [0, 0]</span>
<span class="token comment">// 如果expr为对象字面量，那么转换后会将对象字面量中的属性全部转换为只读属性</span>
<span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token comment">// {x:number, y:number}</span>
<span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">//  { readonly x: 0; readonly y: 0;}</span>

<span class="token comment">// 应用举例</span>
<span class="token keyword">let</span> d1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// number[]</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// sum(...d1) // err number[]类型可能有一个或多个元素，而sum方法声明要求只接收两个</span>
<span class="token keyword">let</span> d2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">//  readonly [1, 2]</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>d2<span class="token punctuation">)</span> <span class="token comment">// ok</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-非空类型断言" tabindex="-1"><a class="header-anchor" href="#_5-非空类型断言" aria-hidden="true">#</a> 5 非空类型断言</h2><p>!类型断言</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 非空类型断言，能够从某个类型中剔除undefined类型和null类型</span>
<span class="token keyword">function</span> <span class="token function">getLen</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDefined</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// return val.length // error val可能为undefined</span>
    <span class="token keyword">return</span> val<span class="token operator">!</span><span class="token punctuation">.</span>length <span class="token comment">// ok</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isDefined</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> val <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> val<span class="token operator">!</span> <span class="token operator">==</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","025类型断言.html.vue"]]);export{u as default};
