import{_ as l,p as i,q as e,a1 as n}from"./framework-96b046e1.js";const o={},t=n(`<h1 id="_16-函数概念" tabindex="-1"><a class="header-anchor" href="#_16-函数概念" aria-hidden="true">#</a> 16 函数概念</h1><p><strong>内容过于简单，不建议看</strong></p><ol><li><p>什么是函数？</p><p>函数是专门用于封装代码的，函数是一段可以随时被反复执行的代码块。</p></li><li><p>函数格式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fuction 函数名称(形参列表){
	被封装的代码；
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不使用函数的弊端</p><ol><li>冗余代码太多</li><li>需求变更，需要修改很多代码。</li></ol></li><li><p>使用函数的好处</p><ol><li>冗余代码少了。</li><li>需求变更，需要修改的代码少了。</li></ol></li><li><p>函数定义步骤</p><ol><li>书写函数固定格式</li><li>给函数起一个有意义的名称 <ol><li>为了提升代码的可阅读性</li><li>函数名称也是标识符的一种，所以也要遵守命名规则和规范。</li></ol></li><li>确定函数的形参列表 <ol><li>看看使用函数时是否许需要传入一些辅助的数据</li></ol></li><li>将需要封装的代码拷贝到{}中</li><li>确定函数的返回值。 <ol><li>可以通过return 数据; 的格式将函数中的计算结果返回给函数的调用者。</li></ol></li></ol></li></ol>`,3),a=[t];function s(r,d){return i(),e("div",null,a)}const _=l(o,[["render",s],["__file","16函数概念.html.vue"]]);export{_ as default};
