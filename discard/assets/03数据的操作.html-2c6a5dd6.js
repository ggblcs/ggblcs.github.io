import{_ as e,p as a,q as d,a1 as i}from"./framework-96b046e1.js";const l={},s=i('<h1 id="数据的操作" tabindex="-1"><a class="header-anchor" href="#数据的操作" aria-hidden="true">#</a> 数据的操作</h1><h2 id="_01插入数据" tabindex="-1"><a class="header-anchor" href="#_01插入数据" aria-hidden="true">#</a> 01插入数据</h2><p>语法：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>insert into `表名` (字段名1,字段名2) values (值1,值2) , (值1,值2);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点：</h4><ol><li>如果你插入的值、备注有中文，那么中文一定要用单引号引起来，数据库是不允许使用双引号的。换句话说数据库中的字符串要用单引号引起来。</li><li>插入数据既可以只插入一条数据，也可以同时插入多条数据。</li><li>插入数据，如果你写字段名了。<code>insert</code>语句中的字段名可以按照数据库默认的字段名顺序(即表头的默认顺序)写，也可以不按照。但是值的顺序必须按照<code>insert</code>语句中的字段名顺序。</li><li>插入数据时，你可以插入所有的字段值，你也可以某些字段不插入值，前提是这些字段可以为空值。</li><li>对于自增属性的字段，你可以插入具体值，也可以插入null或不插入，让其自增。</li><li>插入数据，如果你所有字段都插入值，并且是按照数据库默认的字段顺序(即表头的默认顺序)插入的。<code>insert</code>语句中的第一个括号可以省略不写，即<code>(字段名1,字段名2)</code>可以不写。如果某个值是自增的，你不能省略，必须写上null或者具体值，目的是占位。</li><li>对于有默认值的，你若想让其自动填默认值，需要在值上写<code>default</code>。</li></ol><p>第六条举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>insert into `表名` values (null , 值2 , ...) ;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_02更新-改-数据" tabindex="-1"><a class="header-anchor" href="#_02更新-改-数据" aria-hidden="true">#</a> 02更新(改)数据</h2><p>语法：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update `表名` ste `字段名1` = 值1 , 字段名2 = 值2 [wherer条件];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：where条件决定你修改的数据，符合where条件就修改，如果不加where条件就都修改，后果很严重，所以一定要注意。</p><p>例如：修改id为1的数据name为Tom。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update `student` ste `name` = Tom where id = 1;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_03删除数据" tabindex="-1"><a class="header-anchor" href="#_03删除数据" aria-hidden="true">#</a> 03删除数据</h2><p>语法：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>delete from `表名` [where条件];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_04清空数据" tabindex="-1"><a class="header-anchor" href="#_04清空数据" aria-hidden="true">#</a> 04清空数据</h2><p>语法：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>truncate table `表名`；\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>truncate table 表名</code>与<code>delete from 表名</code>表面上都把所有数据删除了，但有本质的区别：</p><p>前者相当于销毁表，并且创建一个没有数据的新表，插入数据从id=1开始，效率很高；后者相当于逐条便利delete删除，再插入数据id从上次删除的最后一个最大id+1，效率很低。</p><h2 id="_05复制表" tabindex="-1"><a class="header-anchor" href="#_05复制表" aria-hidden="true">#</a> 05复制表</h2><p>语法一：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>create table `新表` selct `字段` from `旧表`;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>语法二：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>create table `新表` like `旧表`;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>区别：</p><p>语法一复制表和表中数据，但是不复制主键，复制后新表没有主键。</p><p>语法二只复制表的框架，复制主键，但不复制表中数据。</p>',30),n=[s];function r(c,t){return a(),d("div",null,n)}const o=e(l,[["render",r],["__file","03数据的操作.html.vue"]]);export{o as default};
