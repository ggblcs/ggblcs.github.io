import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const t={},e=p(`<h1 id="_013-元组类型" tabindex="-1"><a class="header-anchor" href="#_013-元组类型" aria-hidden="true">#</a> 013 元组类型</h1><h2 id="_1-元组的定义" tabindex="-1"><a class="header-anchor" href="#_1-元组的定义" aria-hidden="true">#</a> 1 元组的定义</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 元组类型</span>
<span class="token comment">// TS中的元祖类型其实就是数组类型的扩展</span>
<span class="token comment">// 元组特点：1. 长度固定 2. 每个元素的类型固定</span>
<span class="token keyword">let</span> arr5<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 表示定义了一个名称叫做arr5的元祖, 这个元祖中将来可以存储3个元素, 第一个元素必须是字符串类型, 第二个元素必须是数字类型, 第三个元素必须是布尔类型</span>
arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// arr5 = [&#39;a&#39;, 1, true, false]; // 超过指定的长度会报错</span>
arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-只读元组" tabindex="-1"><a class="header-anchor" href="#_2-只读元组" aria-hidden="true">#</a> 2 只读元组</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 1 使用readonly修饰符</span>
<span class="token keyword">const</span> tuplea<span class="token operator">:</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span>


<span class="token comment">// 2 使用Readonly&lt;T&gt;工具类型</span>
<span class="token keyword">const</span> tupleb<span class="token operator">:</span>Readonly<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span>

<span class="token comment">/*
赋值时，与只读数组一样，
只允许将常规元组赋值给readonly元组，
但不允许将常规元组赋值给只读元组。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-元组类型中的可选元素" tabindex="-1"><a class="header-anchor" href="#_3-元组类型中的可选元素" aria-hidden="true">#</a> 3 元组类型中的可选元素</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义元组可选元素的语法是在元素类型之后添加一个问号</span>
<span class="token comment">// 可选元素必须位于必选元素之后</span>
<span class="token comment">// 可以不给元组的可选元素赋值</span>
<span class="token keyword">let</span> tuple<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">?</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ok</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// ok</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">]</span> <span class="token comment">// ok</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token comment">// ok</span>
<span class="token comment">// tuple = [&#39;1&#39;, true] // 报错 number类型不能为true</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;1&#39;, &lt;2 empty items&gt;, true ]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-元组中的剩余元素" tabindex="-1"><a class="header-anchor" href="#_4-元组中的剩余元素" aria-hidden="true">#</a> 4 元组中的剩余元素</h2><p>元组类型中可以将最后一个元素定义为剩余元素</p><p>如果元组类型的定义中含有剩余元素，那么该元素的元素数量是开放的，它可以包含零个或多个指定类型的剩余元素。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ...T[]</span>
<span class="token keyword">let</span> tuple<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;p&#39;, 1, 2, 3 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-元组的长度" tabindex="-1"><a class="header-anchor" href="#_5-元组的长度" aria-hidden="true">#</a> 5 元组的长度</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 元组中元素个数是固定的，ts编译器能够识别出元组的长度并充分利用该信息进行类型检查。</span>

<span class="token keyword">let</span> tuplea<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">// if (tuplea.length === 3) {} // 报错，条件永远为false</span>

<span class="token comment">// 编译器能够根据元组的可选元素的数量识别出元组所有可能的长度</span>
<span class="token comment">// 进而构造出一个由数字字面量类型构成的联合类型来表示元组的长度</span>
<span class="token keyword">let</span> tupleb<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> len <span class="token operator">=</span> tupleb<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// len = 1 | 2| 3</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
len <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// ok</span>
len <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// ok</span>
len <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// ok</span>
<span class="token comment">// len = 4 // 报错，编译错误，len不可能为4，应为1|2|3，len为联合类型1|2|3</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 ,len不能影响tuple.length，len只是一个普通变量，只不过类型为联合类型1|2|3</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tupleb<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tupleb<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1，删除一个元素，让元组长度为1</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tupleb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;p&#39;] </span>

<span class="token comment">// 如果元组中定义了剩余元素，那么该元组拥有不确定数量的元素，元组length属性将放宽为number类型</span>
<span class="token keyword">const</span> tuplec<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>tuplec<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// ok</span>
<span class="token keyword">let</span> lenc <span class="token operator">=</span> tuplec<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
lenc <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-元组与数组的兼容性" tabindex="-1"><a class="header-anchor" href="#_6-元组与数组的兼容性" aria-hidden="true">#</a> 6 元组与数组的兼容性</h2><p>元组类型是数组类型的子类型</p><p>所以允许元组类型赋值给 元组类型 和 数组类型</p><p>只读元组类型是只读数组类型的子类型</p><p>所以允许只读元组类型赋值给只读数组类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> arra<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> tuplea<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">]</span>
<span class="token comment">// arra = tuplea // 报错，类型不能对应</span>
<span class="token keyword">let</span> tupleaa<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
arra <span class="token operator">=</span> tupleaa <span class="token comment">// ok, 元组类型是数组类型的子类型</span>
<span class="token comment">// tupleaa = arra // 报错</span>

<span class="token keyword">let</span> arrb<span class="token operator">:</span><span class="token keyword">readonly</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> tupleb<span class="token operator">:</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
arrb <span class="token operator">=</span> tupleb <span class="token comment">// ok, 只读元组类型是只读数组类型的子类型</span>
<span class="token comment">// tupleb = arrb // 报错</span>
<span class="token comment">// arra = tupleb // 报错 只读类型（自私）只能赋值给只读类型，但是只读类型可以接受普通类型</span>
<span class="token comment">// 只读数组只允许赋值给只读数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","013元组类型.html.vue"]]);export{k as default};
