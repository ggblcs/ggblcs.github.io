import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const t={},o=p(`<h1 id="_05-重载函数解析顺序" tabindex="-1"><a class="header-anchor" href="#_05-重载函数解析顺序" aria-hidden="true">#</a> 05 重载函数解析顺序</h1><p>当程序中调用了一个重载函数时，编译器将首先构建出一个候选函数重载列表。候选函数重载列表中的成员将以函数重载的声明顺序作为初始顺序，然后进行简单排序，将参数类型中包含字面量类型的函数重载排名提前。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 1</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>y<span class="token operator">:</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 2</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 最终，构造出来的有序候选函数重载列表如下：</span>
<span class="token comment">// 函数重载 2</span>
<span class="token comment">// 函数重载 1</span>
<span class="token comment">// 这个特性要求我们在编写函数重载代码时一定要将最精确的函数重载定义放在最前面，</span>
<span class="token comment">// 因为他们定义的顺序将影响函数调用签名的选择。</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 1</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 2</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 3</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 这一组函数中，函数重载2比重载1更加精确，但不含字面量，所以编译器不会对候选函数重载列表重新排序。</span>
<span class="token comment">// const a:0|1 = f(&#39;str&#39;) // 报错 </span>
<span class="token keyword">const</span> b<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>

<span class="token comment">// 如果把精确的函数重载定义放在前面</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 1</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 2</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 函数重载 3</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> c<span class="token operator">:</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>
<span class="token keyword">const</span> d<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","05重载函数解析顺序.html.vue"]]);export{k as default};
