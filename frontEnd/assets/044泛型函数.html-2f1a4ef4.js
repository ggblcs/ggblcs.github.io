import{_ as s,p as n,q as a,a1 as t}from"./framework-96b046e1.js";const p={},e=t(`<h1 id="_044-泛型函数" tabindex="-1"><a class="header-anchor" href="#_044-泛型函数" aria-hidden="true">#</a> 044 泛型函数</h1><p>泛型函数：一个函数的函数签名中带有类型参数。</p><p>泛型函数中的类型参数用来描述不同参数之间以及参数和函数返回值之间的关系。</p><p>1 泛型函数的定义 函数签名分为调用签名和构造签名。这两种函数签名都支持定义类型参数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span> <span class="token comment">// 定义泛型调用签名的语法</span>
<span class="token keyword">new</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 定义泛型构造签名的语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2 泛型函数类型推断</p><p>就是不传入实际类型参数，typescript能够自动推断出泛型函数的实际类型参数，编译器也能推断出实际类型参数。</p><p>typescript有一个原则，始终将字面量视为字面量类型，只有在必要时才会将字面量类型放宽为某种基础类型。比如不穿实际类型参数，2就识别为数字字面量类型2类型，而不是数字类型。</p>`,8),o=[e];function c(l,r){return n(),a("div",null,o)}const d=s(p,[["render",c],["__file","044泛型函数.html.vue"]]);export{d as default};
