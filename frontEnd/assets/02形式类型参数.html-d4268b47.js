import{_ as n,p as s,q as a,a1 as t}from"./framework-96b046e1.js";const e={},p=t(`<h1 id="_02-形式类型参数" tabindex="-1"><a class="header-anchor" href="#_02-形式类型参数" aria-hidden="true">#</a> 02 形式类型参数</h1><h2 id="_1-形式类型参数声明" tabindex="-1"><a class="header-anchor" href="#_1-形式类型参数声明" aria-hidden="true">#</a> 1 形式类型参数声明</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 放在&lt;&gt;之间；如果有多个形式类型参数，用,隔开；形参类型名建议首字母大写，因为它代表一种类型。</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">funA</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">U</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> funB<span class="token operator">:</span><span class="token operator">&lt;</span>Ta<span class="token punctuation">,</span>Ua<span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span>numbear<span class="token punctuation">)</span><span class="token operator">=&gt;</span>Ta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-类型参数默认类型" tabindex="-1"><a class="header-anchor" href="#_2-类型参数默认类型" aria-hidden="true">#</a> 2 类型参数默认类型</h2><p>在声明形式类型参数时，可以为类型参数设置一个默认类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">funA</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token comment">// 类型参数的默认类型也可以引用形式类型参数列表中的其他类型参数</span>
<span class="token comment">// 但是只能引用在当前类型参数左侧（前面）定义的类型参数</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">funB</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-可选的类型参数" tabindex="-1"><a class="header-anchor" href="#_3-可选的类型参数" aria-hidden="true">#</a> 3 可选的类型参数</h2><p>如果一个形式类型参数没有定义默认类型，那么它是一个必选类型参数。</p><p>如果一个形式类型参数定义了定义了默认类型，那么它是一个可选的类型参数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 形式类型参数列表中，必选类型参数不允许出现在可选类型参数之后。</span>
<span class="token comment">// &lt;T = boolean, U&gt; // 错误</span>
<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">// ok</span>
<span class="token comment">// 编译器以从左到右的顺序依次解析并设置类型参数的默认类型</span>
<span class="token comment">// &lt;T = U, U&gt; // 错误 此时引用的类型参数U处于未定义状态</span>
<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","02形式类型参数.html.vue"]]);export{k as default};
