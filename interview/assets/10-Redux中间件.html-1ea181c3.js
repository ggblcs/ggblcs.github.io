import{_ as e,M as t,p,q as o,R as n,t as c,N as i,a1 as s}from"./framework-96b046e1.js";const l={},r=s(`<h1 id="_10-redux中间件" tabindex="-1"><a class="header-anchor" href="#_10-redux中间件" aria-hidden="true">#</a> 10 -Redux中间件</h1><hr><h2 id="中间件概述" tabindex="-1"><a class="header-anchor" href="#中间件概述" aria-hidden="true">#</a> 中间件概述</h2><p><strong>目标：</strong> 能够理解为什么需要 Redux 中间件</p><blockquote><p>Redux 的 Reducer 函数只能以同步的方式处理状态。</p><p>但实际开发中，获取状态、更新状态通常会涉及到后端请求等异步行为，这种情况应该怎么办？</p><p>答案是：采用 Redux 中间件来解决。</p></blockquote><p><strong>什么是中间件？</strong></p><p>Redux 中间件其实也是一些普通的函数而已</p><ul><li><p>它们在执行 Reducer 函数之前被执行</p></li><li><p>它们可以是同步的、或异步的</p></li><li><p>它们一般用来处理一些公用的逻辑</p></li></ul><p>!---<a href="images/ReduxAsyncDataFlow.gif">ReduxAsyncDataFlow</a></p><hr><h2 id="使用-logger-中间件" tabindex="-1"><a class="header-anchor" href="#使用-logger-中间件" aria-hidden="true">#</a> 使用 logger 中间件</h2><p>**目标：**通过使用一个简单的日志记录中间件，了解 Redux 中间件的基本方式</p><p><strong>步骤：</strong></p><ol><li>安装中间件包 <code>yarn add redux-logger</code></li><li>导入 redux-logger</li><li>从 redux 中导入 applyMiddleware 函数</li><li>将 applyMiddleware() 调用作为 createStore 函数的第二个参数</li><li>调用 applyMiddleware 函数时将 logger 作为参数传入</li><li>调用 store.dispatch() 并查看 logger 中间件记录的日志信息</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 applyMiddleware 函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>

<span class="token comment">// 2. 导入 logger 中间件包</span>
<span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&#39;redux-logger&#39;</span>

<span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">&#39;./reducers&#39;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  rootReducer<span class="token punctuation">,</span>
  <span class="token comment">// 3. 在这里添加 logger 中间件</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="使用-redux-thunk-中间件" tabindex="-1"><a class="header-anchor" href="#使用-redux-thunk-中间件" aria-hidden="true">#</a> 使用 redux-thunk 中间件</h2><p>目标：通过使用 redux-thunk 中间件实现在执行 Reducer 之前执行一些异步逻辑</p><ol><li>安装中间件包 <code>yarn add redux-thunk</code></li><li>导入包 <code>redux-thunk</code></li><li>配置 <code>redux-thunk</code> 中间件</li><li>让执行 Reducer 函数之前执行一些异步逻辑</li></ol><p>配置中间件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&#39;redux-thunk&#39;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  rootReducer<span class="token punctuation">,</span> 
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">,</span> logger<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行异步逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;someaction&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">payload</span><span class="token operator">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="redux-thunk-中间件的原理" tabindex="-1"><a class="header-anchor" href="#redux-thunk-中间件的原理" aria-hidden="true">#</a> redux-thunk 中间件的原理</h2><blockquote><p>改写了 redux 的 dispatch 方法的逻辑，在执行 reducer 函数之前，先执行我们制定的方法。</p></blockquote><p>编写一个 Redux 中间件的固定写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">myMiddleware</span> <span class="token operator">=</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
  <span class="token comment">/* 此处写 中间件 的逻辑代码 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token parameter">extraArgument</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果调用 dispatch() 时传入的参数是一个函数，则执行该函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">action</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span> extraArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 否则放行执行后续的逻辑</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),d={href:"https://github.com/reduxjs/redux-thunk/blob/master/src/index.js",target:"_blank",rel:"noopener noreferrer"},u=s(`<hr><h2 id="redux-devtools-extension的使用" tabindex="-1"><a class="header-anchor" href="#redux-devtools-extension的使用" aria-hidden="true">#</a> redux-devtools-extension的使用</h2><p>**目标：**在开发使用了 Redux 的项目时，可通过谷歌开发者工具跟踪查看 Redux 中的状态变化</p><p><strong>步骤：</strong></p><ol><li>先保证浏览器已安装 ”Redux 开发者工具“ 插件</li><li>在项目中安装依赖包 <code>yarn add redux-devtools-extension</code></li><li>在 <code>store/index.js</code> 中配置 <code>redux-devtools-extension</code></li><li>启动项目并打开 Chrome 开发者工具，进行测试</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;./reducers&#39;</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&#39;redux-thunk&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> composeWithDevTools <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-devtools-extension&#39;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducer<span class="token punctuation">,</span>
  <span class="token function">composeWithDevTools</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function k(v,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",d,[c("redux-thunk 源码链接"),i(a)])]),u])}const g=e(l,[["render",k],["__file","10-Redux中间件.html.vue"]]);export{g as default};
