import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const t={},p=e(`<h1 id="_082-eggjs框架扩展上" tabindex="-1"><a class="header-anchor" href="#_082-eggjs框架扩展上" aria-hidden="true">#</a> 082 EggJs框架扩展上</h1><p>基础功能--&gt;框架扩展</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
1.EggJS扩展
默认情况下EggJS在Application、Context、Request、Response对象上
提供了很多常用的方法给我们使用, 但是有时候默认提供的这些方法可能不能满足我们的需求
此时我们就可以通过EggJS的扩展来给这些对象扩充自定义的方法
https://eggjs.org/zh-cn/basics/extend.html
* */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-给application扩展" tabindex="-1"><a class="header-anchor" href="#_1-给application扩展" aria-hidden="true">#</a> 1.给application扩展</h2><p>首先app目录下新建<code>extend/application.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// this 就是 app 对象，在其中可以调用 app 上的其他方法，或访问属性</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">自定义扩展中的方法被调用了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>param<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用扩展</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// console.log(this.ctx.app.myTest(&#39;123&#39;));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-给ctx扩展" tabindex="-1"><a class="header-anchor" href="#_2-给ctx扩展" aria-hidden="true">#</a> 2.给ctx扩展</h2><p>首先创建<code>/app/extend/context.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// this 就是 ctx 对象，在其中可以调用 ctx 上的其他方法，或访问属性</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">自定义扩展中的方法被调用了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>param<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用扩展</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// console.log(this.ctx.myTest(&#39;abc&#39;));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-给request扩展" tabindex="-1"><a class="header-anchor" href="#_3-给request扩展" aria-hidden="true">#</a> 3.给request扩展</h2><p>同理创建<code>app/extend/request.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;x-request-foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// console.log(this.ctx.request.myTest(&#39;666&#39;));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-给response扩展" tabindex="-1"><a class="header-anchor" href="#_4-给response扩展" aria-hidden="true">#</a> 4.给response扩展</h2><p>同理创建<code>app/extend/response.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// this 就是 response 对象，在其中可以调用 response 上的其他方法，或访问属性</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">自定义扩展中的方法被调用了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>param<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用扩展</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// console.log(this.ctx.response.myTest(&#39;888&#39;));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23),i=[p];function c(o,l){return s(),a("div",null,i)}const r=n(t,[["render",c],["__file","082EggJs框架扩展上.html.vue"]]);export{r as default};
