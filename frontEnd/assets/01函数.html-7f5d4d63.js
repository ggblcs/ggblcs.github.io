import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const p={},t=e(`<h1 id="_01-函数" tabindex="-1"><a class="header-anchor" href="#_01-函数" aria-hidden="true">#</a> 01 函数</h1><p>【字面量就是某一个固定的值的表示法】</p><h2 id="_1-函数类型字面量" tabindex="-1"><a class="header-anchor" href="#_1-函数类型字面量" aria-hidden="true">#</a> 1 函数类型字面量</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Type
<span class="token comment">// 是函数类型字面量的语法</span>
<span class="token comment">// 是定义一个函数类型的方法之一</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// TS函数完整格式</span>
<span class="token comment">// 在TS中函数的完整格式应该是由函数的定义和实现两个部分组成的</span>

<span class="token comment">// 函数类型字面量定义一个函数</span>
<span class="token keyword">let</span> <span class="token function-variable function">AddFun</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token comment">// 根据定义实现函数</span>
<span class="token function-variable function">AddFun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">AddFun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 一步到位写法</span>
<span class="token keyword">let</span> <span class="token function-variable function">AddFun</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function-variable function">number</span> <span class="token operator">=</span> 
<span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">AddFun</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 根据函数的定义自动推导对应的数据类型</span>
<span class="token keyword">let</span> <span class="token function-variable function">AddFun</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function-variable function">number</span> <span class="token operator">=</span>
<span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">AddFun</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-调用签名" tabindex="-1"><a class="header-anchor" href="#_2-调用签名" aria-hidden="true">#</a> 2 调用签名</h2><p>用对象类型声明函数类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 调用签名 参见 对象类型字面量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-构造签名" tabindex="-1"><a class="header-anchor" href="#_3-构造签名" aria-hidden="true">#</a> 3 构造签名</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 构造函数类型字面量</span>
<span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> Person<span class="token operator">:</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span>object<span class="token punctuation">}</span>
Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> age<span class="token punctuation">;</span> <span class="token comment">// private修饰符只能在ts中使用</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment">// 构造函数类型字面量完全等同于仅包含一个类型成员的对象类型字面量</span>
<span class="token comment">// 即：构造函数类型字面量是仅包含单个构造函数签名的对象类型字面量的简写形式</span>
<span class="token comment">// 所以上面的可简写为：</span>
<span class="token keyword">let</span> PersonA<span class="token operator">:</span><span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-调用签名与构造签名" tabindex="-1"><a class="header-anchor" href="#_4-调用签名与构造签名" aria-hidden="true">#</a> 4 调用签名与构造签名</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 有一些函数既可以作为普通函数，又可以作为构造函数，如js内置的Number() String()</span>
<span class="token comment">// 在对象中同时定义调用签名和构造签名则可以表示这种情况。</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> Fun<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span>Number<span class="token punctuation">;</span>  <span class="token comment">// 构造签名</span>
    <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token comment">// 调用签名</span>
<span class="token punctuation">}</span>

<span class="token comment">// 作为普通函数调用</span>
<span class="token keyword">const</span> a<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// 作为构造函数调用</span>
<span class="token keyword">const</span> b<span class="token operator">:</span>Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","01函数.html.vue"]]);export{r as default};
