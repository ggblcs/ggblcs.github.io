import{_ as n,p as t,q as s,a1 as a}from"./framework-96b046e1.js";const e={},l=a(`<h1 id="_05-数组方法" tabindex="-1"><a class="header-anchor" href="#_05-数组方法" aria-hidden="true">#</a> 05 数组方法</h1><h2 id="_02-一般方法" tabindex="-1"><a class="header-anchor" href="#_02-一般方法" aria-hidden="true">#</a> 02 一般方法</h2><p>改变原数组</p><table><thead><tr><th style="text-align:center;">index</th><th style="text-align:center;">方法名</th><th style="text-align:center;">操作原数组</th><th style="text-align:center;">返回值</th><th style="text-align:center;">参数</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">push</td><td style="text-align:center;">是</td><td style="text-align:center;">添加后数组长度</td><td style="text-align:center;">无</td><td style="text-align:left;">在原有数组最后一个添加</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">unshift</td><td style="text-align:center;">是</td><td style="text-align:center;">添加后数组长度</td><td style="text-align:center;">无</td><td style="text-align:left;">在数组最前面添加多个数据</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">pop</td><td style="text-align:center;">是</td><td style="text-align:center;">删除的数据</td><td style="text-align:center;">无</td><td style="text-align:left;">删除数组中的最后一条数据</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">shift</td><td style="text-align:center;">是</td><td style="text-align:center;">删除的数据</td><td style="text-align:center;">无</td><td style="text-align:left;">删除数组中的第一条数据</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">splice(移接)</td><td style="text-align:center;">是</td><td style="text-align:center;">被删除或被操作的元素</td><td style="text-align:center;">参数1：从a[1]开始 [参数2]：删除1个元素 [参数3]：修改后新的内容</td><td style="text-align:left;">用于删除或修改</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">reverse</td><td style="text-align:center;">是</td><td style="text-align:center;">反转后的数组</td><td style="text-align:center;">无</td><td style="text-align:left;">数组反转</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">fill</td><td style="text-align:center;">是</td><td style="text-align:center;">填充后的数组</td><td style="text-align:center;">参数1：需要填充的值</td><td style="text-align:left;">将数组所有元素变为指定填充值</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">sort</td><td style="text-align:center;">是</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:left;">排序</td></tr></tbody></table><p>不改变原数组</p><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">方法名</th><th style="text-align:center;">操作原数组</th><th style="text-align:center;">返回值</th><th style="text-align:center;">参数</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">toString</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">字符串</td><td style="text-align:center;">无</td><td style="text-align:left;">数组转字符串</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">join</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">字符串</td><td style="text-align:center;">[参数]：连接符号</td><td style="text-align:left;">数组转指定格式字符串</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">slice</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">截取的内容数组</td><td style="text-align:center;">参数1：起始位置a[m] 参数2：终止位置a[n-1]</td><td style="text-align:left;">截取你想要的内容</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">concat</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">indexOf</td><td style="text-align:center;"></td><td style="text-align:center;">要查找内容的位置，-1表示没找到</td><td style="text-align:center;">参数1：要查找的内容 [参数2]：从哪个位置开始查找</td><td style="text-align:left;">要查找内容的位置，-1表示没找到</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">lastIndexOf</td><td style="text-align:center;"></td><td style="text-align:center;">要查找内容的位置，-1表示没找到</td><td style="text-align:center;">参数1：要查找的内容 [参数2]：从哪个位置开始查找</td><td style="text-align:left;">要查找内容的位置，-1表示没找到</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">includes</td><td style="text-align:center;"></td><td style="text-align:center;">true,false</td><td style="text-align:center;">参数1：要查找的内容</td><td style="text-align:left;">查看数组是否包含某个元素</td></tr></tbody></table><p>传递函数</p><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">方法名</th><th style="text-align:center;">操作原数组</th><th style="text-align:center;">返回值</th><th style="text-align:center;">参数</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">forEach</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">--</td><td style="text-align:center;">函数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">findIndex</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">-1，0~n</td><td style="text-align:center;">函数</td><td style="text-align:left;">找index</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">find</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">ele</td><td style="text-align:center;">函数</td><td style="text-align:left;">找元素，返回一个元素</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">filter</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">数组</td><td style="text-align:center;">函数</td><td style="text-align:left;">过滤器</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">map</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">数组</td><td style="text-align:center;">函数</td><td style="text-align:left;">数组映射，return什么返回什么</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">reduce</td><td style="text-align:center;"><strong>否</strong></td><td style="text-align:center;">---</td><td style="text-align:center;">函数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">sort</td><td style="text-align:center;">是</td><td style="text-align:center;">数组</td><td style="text-align:center;">函数</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="_02-遍历" tabindex="-1"><a class="header-anchor" href="#_02-遍历" aria-hidden="true">#</a> 02 遍历</h2><p><code>for(let value of arr)</code></p><h2 id="_03-高级" tabindex="-1"><a class="header-anchor" href="#_03-高级" aria-hidden="true">#</a> 03 高级</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&quot;是&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//找到返回index，找不到返回-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&quot;是&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//找到返回找到的元素，找不到返回undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&quot;是&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 满足条件后返回新数组，数组过滤，只要能return true（或者代表true的字符）就能获取数组元素。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> currentArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[undefined, true, undefined, undefined, true]</span>
<span class="token comment">//数组映射，return啥，newArray里就是啥元素，没return就是undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//删除后长度不变</span>
<span class="token comment">// [&quot;我&quot;, &quot;是&quot;, empty, &quot;过&quot;, &quot;人&quot;, &quot;爱&quot;, &quot;中&quot;, &quot;国&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> current<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pre<span class="token operator">+</span>current
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>
<span class="token comment">/*
o a
oa b
oab c
oabc d
res:  oabcd
*/</span>
<span class="token comment">// reduce方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-排序" tabindex="-1"><a class="header-anchor" href="#_04-排序" aria-hidden="true">#</a> 04 排序</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>是否改变原有数据：是
返回值：排序后的数据
技巧：看哪个<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>，再看<span class="token operator">&gt;</span><span class="token operator">&lt;</span>就知道，<span class="token operator">&lt;</span>就是从小到大
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不传参就是默认从小到大排序</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">/*
如果compareFunction(a, b)小于0，那么a会被排到b前
如果compareFunction(a, b)等于0，a和b的位置不变
如果compareFunction(a, b)大于0，b会排在a之前------官方文档

如果元素时字符串类型，那么比较的是字符串的Unicode编码
 */</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//pp</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//bb 与上面pp的返回值必须一正一负</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-静态方法" tabindex="-1"><a class="header-anchor" href="#_05-静态方法" aria-hidden="true">#</a> 05 静态方法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token comment">// 集合转数组</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>oA<span class="token punctuation">)</span> <span class="token comment">// 伪数组转数组，document.queryselectorAll(&quot;a&quot;)</span>

Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>oA<span class="token punctuation">)</span> <span class="token comment">// 是否是数组</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 零散的内容转数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),c=[l];function p(i,o){return t(),s("div",null,c)}const d=n(e,[["render",p],["__file","05数组方法.html.vue"]]);export{d as default};
