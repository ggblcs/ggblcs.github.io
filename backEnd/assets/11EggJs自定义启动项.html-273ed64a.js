import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const t={},e=p(`<h1 id="_11-eggjs自定义启动项" tabindex="-1"><a class="header-anchor" href="#_11-eggjs自定义启动项" aria-hidden="true">#</a> 11 EggJs自定义启动项</h1><p>指南--&gt;启动自定义</p><p><strong>需求1：把定是任务获取的数据渲染到动态网页。</strong></p><p><code>/app/schedule/updateMessage.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Subscription <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;egg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Subscription<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">UpdateCache</span> <span class="token keyword">extends</span> <span class="token class-name">Subscription</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过 schedule 属性来设置定时任务的执行间隔等配置</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token string">&#39;10s&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 间隔3秒执行一次</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> <span class="token comment">//  all表示当前服务器上所有相同的Node进程都执行</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// subscribe 是真正定时任务执行时被运行的函数</span>
    <span class="token keyword">async</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:3000/getMsg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// -------------------------------------</span>
        <span class="token comment">// 获取的数据绑定到app实例对象上</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>msg <span class="token operator">=</span> data<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> UpdateCache<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/app/controller/home.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Controller <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;egg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// await this.ctx.render(&#39;index&#39;, {msg:&#39;www.it666.com&#39;});</span>
        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>msg<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> HomeController<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会有一个问题，第一次浏览动态网页时，定是任务还没执行，就会导致数据为空。所以新的需求就产生了，就是在第一次启动项目时就需要执行一次定时任务。</p><p><strong>需求2：就是在第一次启动项目时就需要执行一次定时任务。</strong></p><p>根目录下新建<code>/app.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app.js</span>
<span class="token keyword">class</span> <span class="token class-name">AppBootHook</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这个方法会在EggJS程序启动完毕之后执行</span>
    <span class="token keyword">async</span> <span class="token function">serverDidReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意点: 这里传递的不是方法名称, 而是需要被执行的那个定时任务文件的名称</span>
       <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">runSchedule</span><span class="token punctuation">(</span><span class="token string">&#39;updateMessage&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> AppBootHook<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方法是生命周期方法。更多的生命周期方法请浏览：指南--&gt;启动自定义。</p>`,12),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","11EggJs自定义启动项.html.vue"]]);export{r as default};
