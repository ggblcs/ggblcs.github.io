import{_ as e,M as t,p,q as o,R as n,t as s,N as c,a1 as l}from"./framework-96b046e1.js";const i={},r=n("h1",{id:"_13-金额显示千位符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_13-金额显示千位符","aria-hidden":"true"},"#"),s(" 13 金额显示千位符")],-1),u=n("p",null,"例如：2766显示为2,766",-1),k={href:"https://so.csdn.net/so/search?q=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},d=l(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transform</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">transform</span><span class="token punctuation">(</span><span class="token number">10033434</span><span class="token punctuation">)</span> <span class="token comment">//10,033,434</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但遇到非整数的情况下例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">transform</span><span class="token punctuation">(</span><span class="token number">53526.333</span><span class="token punctuation">)</span> <span class="token comment">// 53526.333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并不会发生转换，这是因为正则中的$符号表示的是匹配字符串的末尾，此时分两种情况考虑，用indexOf找到 ‘,’ ， 在做相应变化，改善后的代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">thousands2</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> reg <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(\\d{3})+\\.)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">thousands2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1234567.1234567</span>）<span class="token comment">//-1,234,567.1234567</span>
<span class="token function">thousands2</span><span class="token punctuation">(</span><span class="token number">2232.33</span><span class="token punctuation">)</span>  <span class="token comment">//2,232.33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就能解决常用的千位制的转换啦！</p><p>转载原文链接：https://blog.csdn.net/qq_44988115/article/details/106528146</p>`,7);function m(g,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,u,n("p",null,[s("在商城页面中我们经常会遇到需要每三位用逗号表示的时候，这时，用原生的js解决不够方便，此时可以使用"),n("a",k,[s("正则表达式"),c(a)]),s("来进行快速替换")]),d])}const f=e(i,[["render",m],["__file","13金额显示千位符.html.vue"]]);export{f as default};
