import{_ as n,p as s,q as a,a1 as t}from"./framework-96b046e1.js";const p={},e=t(`<h1 id="_01-一些新学语法" tabindex="-1"><a class="header-anchor" href="#_01-一些新学语法" aria-hidden="true">#</a> 01 一些新学语法</h1><h2 id="_1-可选链运算符" tabindex="-1"><a class="header-anchor" href="#_1-可选链运算符" aria-hidden="true">#</a> 1 可选链运算符</h2><p>.?</p><p>可选链，js只有高版本才有这个语法，只有对象不为null或undefined时才访问它的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ?.</span>
<span class="token comment">// 用法：？放在null | undefined的后面</span>
<span class="token comment">// 在不确定是否有值的属性前写上?.可以返回undefined，而不是报错</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token operator">?.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token comment">// console.log(obj.child.a) // 报错 因为a不知道是啥</span>
<span class="token comment">// console.log(obj?.child.a.b); // 报错 可选链放太早 因为a不知道是啥</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>child<span class="token operator">?.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token comment">// console.log(obj.child.a?.b); // 报错  可选链放太晚，不知道a是啥</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>child<span class="token operator">?.</span>a<span class="token operator">?.</span>b<span class="token operator">?.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined 应该这么做</span>

<span class="token keyword">const</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">child</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> objB <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">child</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
<span class="token comment">// console.log(objA.child.a); // 报错，null.a不知道是啥</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objB<span class="token punctuation">.</span>child<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token comment">// console.log(objB.child.a.b); // 报错，undefined.a不知道是啥</span>

<span class="token comment">// 短路求值</span>
<span class="token comment">// a?.[++x]</span>
<span class="token comment">// 由于a为undefined，所以++x不会执行，叫短路求值</span>
<span class="token comment">// 类似还有&amp;&amp; ||</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-空值合并运算符" tabindex="-1"><a class="header-anchor" href="#_2-空值合并运算符" aria-hidden="true">#</a> 2 空值合并运算符</h2><p>?? js只有高版本才有这个语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ??</span>
<span class="token comment">// ??就是str是否有值，如果有就取str，没有就取&#39;99&#39;</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">??</span> <span class="token string">&quot;99&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-对象可计算属性名" tabindex="-1"><a class="header-anchor" href="#_3-对象可计算属性名" aria-hidden="true">#</a> 3 对象可计算属性名</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span>

<span class="token comment">// 可计算属性名</span>

<span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span>
<span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token string">&quot;say&quot;</span>
<span class="token keyword">const</span> three <span class="token operator">=</span> <span class="token string">&quot;bt&quot;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>one<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;zs&quot;</span> <span class="token punctuation">,</span>
    <span class="token punctuation">[</span>two<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>three<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;thr&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>three<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;thrFunction&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 上面那个three会被覆盖</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>one<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// zs</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// zs</span>
obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
obj<span class="token punctuation">[</span>two<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// world</span>
obj<span class="token punctuation">[</span>three<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// thrFunction</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zs&#39;, say: [Function: say], bt: [Function: bt] }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bug</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 为什么可以运行？</span>
<span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token string">&quot;fun&quot;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span>
<span class="token comment">// 调用方法前不能打印obj以及里面的属性，否则调用失败</span>
<span class="token comment">// 调用后打印obj为undefined。</span>
<span class="token comment">// 调用后打印obj的一切都不存在。</span>
<span class="token comment">// 简直是bug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-对象的存取器属性" tabindex="-1"><a class="header-anchor" href="#_4-对象的存取器属性" aria-hidden="true">#</a> 4 对象的存取器属性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(this.name); // 报错</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;如果在get中调用this.name就会无限调用this.name导致内存溢出报错！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token comment">// 正确的调用方式</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token string">&quot;如果在set调用this.name,也会报错！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> val <span class="token comment">// 正确的调用方式</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;ls&#39;</span> <span class="token comment">// 会自动调用set name方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ls 会自动调用get name方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","01一些新学语法.html.vue"]]);export{d as default};
