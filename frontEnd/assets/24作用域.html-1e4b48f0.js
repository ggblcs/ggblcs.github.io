import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const l={},p=e(`<h1 id="_24-作用域" tabindex="-1"><a class="header-anchor" href="#_24-作用域" aria-hidden="true">#</a> 24 作用域</h1><h2 id="_01-变量作用域" tabindex="-1"><a class="header-anchor" href="#_01-变量作用域" aria-hidden="true">#</a> 01 变量作用域</h2><ol><li><p>在js中定义变量有两种方式</p><ol><li>ES6之前：var 变量名称</li><li>ES6开始：let 变量名称</li></ol></li><li><p>两种定义变量方式的区别</p><ol><li><p>是否能够定义同名变量</p><ol><li><p>通过var定义变量可以重复定义重名变量，并且后定义的会覆盖先定义的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//不会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果通过let定义变量，“相同作用域”内不可以重复定义重名的变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>是否能够先使用后定义</p><ol><li>通过var定义变量可以先使用后定义（预解析）</li><li>通过let定义变量不可以先使用后定义。（不会预解析）</li></ol></li><li><p>是否能被{}限制作用域</p><ol><li><p>无论是var还是let定义在{}外面都是全局变量。</p></li><li><p>将var定义在**块级作用域{}**里面还是一个全局变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将let定义在块级作用域{}里面是一个局部变量。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
	let num = 123;
}
console.log(num);//会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将var 和let定义在局部作用域{}（函数中的{}）里，都是局部变量。</p></li></ol></li></ol><p><strong>注意点</strong></p><ol><li><p>在js中{}外面的作用域，我们称之为全局作用域。</p></li><li><p>在js中函数后面{}中的作用域，我们称之为“局部作用域”。</p></li><li><p>在ES6中只要{}没有和函数结合在一起，那么应该“块级作用域”。</p></li><li><p>块级作用域和局部作用域的区别。</p><ol><li>在块级作用域用var定义变量是全局变量。</li><li>在块级作用域用let定义变量是局部变量。</li><li>在局部作用域用var和let定义变量都是局部变量。</li></ol></li><li><p>无论是块级作用域还是局部作用域，省略变量前面的let或者var就会变成一个全局变量（得调用该函数）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token comment">//块级作用域</span>
	<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//全局变量</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//块级作用域</span>
<span class="token punctuation">}</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//块级作用域</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//块级作用域</span>
<span class="token punctuation">}</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
	<span class="token comment">//块级作用域</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//块级作用域</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//局部作用域</span>
	<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>
	arr <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//全局变量（得调用该函数）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h2 id="_02-作用域链" tabindex="-1"><a class="header-anchor" href="#_02-作用域链" aria-hidden="true">#</a> 02 作用域链</h2><p>初学者在研究”作用域链“时最好将ES6之前和ES6之后分开研究</p><ol><li><p>ES6之前</p><ol><li>总：{}外的作用域为全局作用域。</li><li>总：函数后{}的作用域为“局部作用域”</li><li>总：ES6中不是函数后面的{}的作用域为块级作用域。</li><li>ES6之前定义变量通过var。</li><li>ES6之前没有块级作用域，只用全局作用域和局部作用域。</li><li>ES6之前函数大括号外的是全局作用域。</li><li>ES6之前函数大括号中的是局部作用域。</li></ol></li><li><p>ES6之前作用域链</p><ol><li><p>全局作用域我们称之为0级作用域。</p></li><li><p>定义函数开启的作用域就是1级/2级/3级...作用域。</p></li><li><p>JavaScript会将这些作用域链接在一起形成一个链条，这个链条就是作用域链。</p><p>0 --&gt; 1--&gt;2 --&gt;3 --&gt;4</p></li><li><p>除0级作用域外，当前作用域级别等于上一级+1.</p></li></ol></li><li><p>变量在作用域链查找规则</p><ol><li>先在当前作用域查找，找到就使用当前作用域找到的。</li><li>如果当前作用域没有找到，就去上一级作用域查找。</li><li>以此类推，直到0级作用域，如果还没找到，就报错。</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//1级作用域</span>
	<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//2级作用域</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>ES6开始</p><ol><li>ES6定义变量通过let。</li><li>ES6除了全局作用域，局部作用域以外，还新增了块级作用域。</li><li>ES6虽然新增了块级作用域，但是通过let定义并无差异（都是局部变量）。</li></ol></li><li><p>ES6作用域链</p><ol><li><p>全局作用域我们称之为0级作用域。</p></li><li><p>定义函数<strong>或者代码块</strong>开启的作用域就是1级/2级/3级...作用域。</p></li><li><p>JavaScript会将这些作用域链接在一起形成一个链条，这个链条就是作用域链。</p><p>0 --&gt; 1--&gt;2 --&gt;3 --&gt;4</p></li><li><p>除0级作用域外，当前作用域级别等于上一级+1.</p></li></ol></li><li><p>变量在作用域链查找规则</p><ol><li>先在当前作用域查找，找到就使用当前作用域找到的。</li><li>如果当前作用域没有找到，就去上一级作用域查找。</li><li>以此类推，直到0级作用域，如果还没找到，就报错。</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//全局作用域/0级作用域</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
	<span class="token comment">//1级作用域</span>
	<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//2级作用域</span>
		<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),i=[p];function t(o,c){return s(),a("div",null,i)}const d=n(l,[["render",t],["__file","24作用域.html.vue"]]);export{d as default};
