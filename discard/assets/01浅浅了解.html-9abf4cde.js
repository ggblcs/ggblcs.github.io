import{_ as i,p as l,q as e,a1 as a}from"./framework-96b046e1.js";const t="/discard/assets/02TomCat-a1a1aabb.png",s="/discard/assets/01TomCat-9ba4ab20.png",o="/discard/assets/03-A-01idea-e7d074d5.png",p="/discard/assets/03-B-02idea-7ea292c0.png",c="/discard/assets/03-B-03idea-012bc3ee.png",d="/discard/assets/03-C-01-5a9bebd4.png",r="/discard/assets/03-C-02idea-985ca0f3.png",n="/discard/assets/04-idea-newprojict-01-01e680e8.png",h="/discard/assets/04-idea-newprojict-02-2932abbf.png",m="/discard/assets/05-A-01-e5f37a1d.png",u="/discard/assets/05-A-02-33f59585.png",b={},g=a(`<h1 id="_01-浅浅了解" tabindex="-1"><a class="header-anchor" href="#_01-浅浅了解" aria-hidden="true">#</a> 01 浅浅了解</h1><hr><h2 id="title-01-浅浅了解" tabindex="-1"><a class="header-anchor" href="#title-01-浅浅了解" aria-hidden="true">#</a> title: 01 浅浅了解</h2><h2 id="_01在eclipse中新建jsp文件" tabindex="-1"><a class="header-anchor" href="#_01在eclipse中新建jsp文件" aria-hidden="true">#</a> 01在eclipse中新建jsp文件</h2><ol><li><p>新建 --→ 项目 --→ Web --→ Dynamic Web Project --→下一个界面</p></li><li><p>项目命名 --→ 修改Dynamic web module version为2.5 --→ 完成 --→ 下一界面</p></li><li><p>找到WebContent文件夹下新建jsp文件 --→ 把文件里ISO-8859-1修改为UTF-8（也可使用修改设置永久修改）</p></li></ol><blockquote><p>永久修改方法：窗口 → 首选项 → 搜索web → 找到JSP Files → 修改Encoding 为 ISO 10646/Unicode（UTF-8）；</p></blockquote><h2 id="_02什么是jsp" tabindex="-1"><a class="header-anchor" href="#_02什么是jsp" aria-hidden="true">#</a> 02什么是JSP</h2><p>从用户角度来看，就是一个网页，从程序员角度来看，就是一个java类，它继承了servlet，所以可以说jsp就是一个servlet。</p><p>JSP是干什么的？</p><p>hrml多数情况下永凯显示静态网页内容，一成不变。但是有时候需要显示静态数据，比如查询所有学生信息，根据姓名查询具体某个学生。这些动作需要查询数据库，然后在网页上显示，HTML里不支持Java代码，jsp里可以写java代码。</p><h2 id="_03jsp三大指令" tabindex="-1"><a class="header-anchor" href="#_03jsp三大指令" aria-hidden="true">#</a> 03JSP三大指令</h2><p>指令写法：<code>&lt;%@指令%&gt;</code></p><h3 id="page指令" tabindex="-1"><a class="header-anchor" href="#page指令" aria-hidden="true">#</a> page指令</h3><ol><li><p>language：表明jsp里面写的代码语言，如java、php。</p></li><li><p>contenctType：说明此文件是什么类型，告诉浏览器我是什么内容类型，以及使用什么编码。</p></li><li><p>pageEncoding：用来说明JSP内容编码。</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><hr><h2 id="_01web服务器软件" tabindex="-1"><a class="header-anchor" href="#_01web服务器软件" aria-hidden="true">#</a> 01web服务器软件</h2><ol><li><p>服务器：安装了服务器软件的计算机</p></li><li><p>服务器软件：接受用户请求，处理请求，做出响应。</p></li><li><p>web服务器软件：接受用户的请求，处理请求，做出响应。</p></li><li><p>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目。</p></li><li><p>web容器</p></li><li><p>常见的Java相关的web服务器软件：</p><ol><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费。</li><li>WebSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费。</li><li>JBOSS：JBOSS公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费。</li><li>TomCat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp，免费。</li></ol></li><li><p>JavaEE：Java语言在企业级开发中使用的技术规范和总和，一共规定了13项大的规范。</p></li><li><p>TomCat：web服务器软件<img src="`+t+'" alt="02TomCat"></p><ol><li><p>下载：http://tomcat.apache.org/</p></li><li><p>安装：解压即安装。</p></li></ol></li><li><p>卸载：删除目录即可。</p></li><li><p>启动：</p></li><li><p>bin/startup.bat，双击运行该文件即可!<img src="'+s+`" alt="01TomCat安装"></p></li><li><p>访问：浏览器输入：http://localhost:8080 访问自己</p><p>​ http://ip:8080 访问别人</p></li><li><p>可能遇到的问题：</p><ol><li>黑窗口一闪而过： <ol><li>原因：没有正确配置|JAVA_HOME环境变量。</li><li>解决：正确配置即可。</li></ol></li><li>启动报错： <ol><li>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程 <code>netstat -ano</code>CMD查看端口号命令，查找占用8080端口号的进程。</li><li>温柔：修改自身的端口号（不建议使用） <ol><li>conf/server.xml 2.<code> &lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8445&quot;/&gt;</code></li><li>一般会将TomCat的默认端口号修改为80.这样访问时就可以省掉端口号了。</li></ol></li></ol></li></ol></li><li><p>关闭：</p><ol><li>正常关闭： <ol><li>bin/shutdown.bat</li><li>Ctrl+C</li></ol></li><li>强制关闭： <ol><li>点击启动窗口的x</li></ol></li></ol></li><li><p>配置（部署项目）：</p><ol><li>直接将项目放到webapps目录下即可。 <ol><li>/hello：项目的访问路径 --&gt; 虚拟目录</li><li>简化部署：将项目打包成一个war包，再将war包放置到webapps目录下。war包会自动解压缩。</li></ol></li><li>配置conf/server.xml文件 <ol><li>在<code>&lt;Host&gt;</code>标签中配置</li><li><code>&lt;Context docBase=&quot;D:/hello&quot; path=&quot;/hehe&quot;/&gt;</code></li><li>docBase：项目存放的路径</li><li>path：虚拟目录</li></ol></li><li>在conf/Catalina/localhost创建任意名称的xml文件。在文件中编写<code>&lt;Context docBase=&quot;D:/hello&quot;/&gt;</code><ul><li>虚拟目录：xml文件的名称</li></ul></li></ol></li><li><p>静态项目和动态项目：</p></li></ol><ul><li><p>目录结构（java动态）</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>项目根目录
	web-inf目录
		web.xml:web项目的核心配置文件
		classes：放置字节码文件的目录
		lib目录：放置依赖的jar包
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</p></li></ul><ol start="15"><li><p>执行原理：</p><ol><li>当服务器接收到客户端浏览器的请求后，会解析请求URL路径，访问获取的servlet资源路径。</li><li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签提内容。</li><li>如果有，则再找到对应的<code>&lt;servlet-class&gt;</code>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象。</li><li>调用其方法。</li></ol></li><li><p>idea的使用：</p><ol><li><p>配置tomcat<img src="`+o+'" alt="03-A-01idea"></p><p><img src="'+p+'" alt="03-B-02idea"></p><p><img src="'+c+'" alt="03-B-03idea"></p></li><li><p>设置更新资源重新部署</p></li><li><p><img src="'+d+'" alt="03-C-01"></p><p><img src="'+r+'" alt="03-C-02配置idea"></p></li><li><p>新建web工程</p><p><img src="'+n+'" alt="04-idea-newprojict-01"></p><p><img src="'+h+'" alt="04-idea-newprojict-02"></p></li><li><p>虚拟符号的设置<img src="'+m+'" alt="05-A-01虚拟符号"></p><p><img src="'+u+'" alt="05-A-02虚拟符号"></p></li></ol></li></ol>',20),_=[g];function v(j,w){return l(),e("div",null,_)}const q=i(b,[["render",v],["__file","01浅浅了解.html.vue"]]);export{q as default};
