import{_ as e,p as a,q as i,a1 as d}from"./framework-96b046e1.js";const l={},n=d(`<h1 id="_001-初始" tabindex="-1"><a class="header-anchor" href="#_001-初始" aria-hidden="true">#</a> 001 初始</h1><blockquote><p>01 04 05 可以看看</p></blockquote><h2 id="_01-入门" tabindex="-1"><a class="header-anchor" href="#_01-入门" aria-hidden="true">#</a> 01 入门</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;iostream&gt; 
#include &lt;string&gt; // 使用C++风格字符串需要引入
using namespace std;

int main()
{
   cout &lt;&lt; &quot;Hello World&quot;;
   system(&quot;pause&quot;);
   return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-注释" tabindex="-1"><a class="header-anchor" href="#_02-注释" aria-hidden="true">#</a> 02 注释</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 
/**/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-常量" tabindex="-1"><a class="header-anchor" href="#_03-常量" aria-hidden="true">#</a> 03 常量</h2><h3 id="_3-1-define宏常量" tabindex="-1"><a class="header-anchor" href="#_3-1-define宏常量" aria-hidden="true">#</a> 3.1 #define宏常量</h3><h3 id="_3-2-const修饰的变量" tabindex="-1"><a class="header-anchor" href="#_3-2-const修饰的变量" aria-hidden="true">#</a> 3.2 const修饰的变量</h3><p>修饰的变量为常量。</p><h2 id="_04-变量" tabindex="-1"><a class="header-anchor" href="#_04-变量" aria-hidden="true">#</a> 04 变量</h2><h3 id="_4-1-整型" tabindex="-1"><a class="header-anchor" href="#_4-1-整型" aria-hidden="true">#</a> 4.1 整型</h3><ul><li><p>short 短整型</p></li><li><p>int 整型</p></li><li><p>long 长整型</p></li><li><p>long long 长长整型</p></li></ul><h3 id="_4-2-实型-浮点型" tabindex="-1"><a class="header-anchor" href="#_4-2-实型-浮点型" aria-hidden="true">#</a> 4.2 (实型)浮点型</h3><ul><li>float 单精度 <code>float f1 = 3.14f;</code>（不加f默认是double，用float接收会多进行一步转化）</li><li>double 双精度 <code>double d1 = 3.14;</code></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>科学计数法
float f2 = 3e2; // 3*10^2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>默认情况下，输出大于六位的小数，会显示6位有效数字。</p></blockquote><h3 id="_4-3-字符型" tabindex="-1"><a class="header-anchor" href="#_4-3-字符型" aria-hidden="true">#</a> 4.3 字符型</h3><p>char ch = &#39;a&#39;;</p><blockquote><ol><li>只能用单引号</li><li>只能有一个字符</li></ol></blockquote><h3 id="_4-4-字符串型" tabindex="-1"><a class="header-anchor" href="#_4-4-字符串型" aria-hidden="true">#</a> 4.4 字符串型</h3><ul><li><strong>C风格</strong></li></ul><p>char 变量名[] = &quot;abc&quot;;</p><ul><li><strong>C++风格</strong></li></ul><p>string str = &quot;aba&quot;;</p><h3 id="_4-5-布尔类型" tabindex="-1"><a class="header-anchor" href="#_4-5-布尔类型" aria-hidden="true">#</a> 4.5 布尔类型</h3><p>bool = true; // 占用一个字节</p><blockquote><p>C++ 中除了0，其它都是真，包括负数</p></blockquote><h2 id="_05-sizeof关键字" tabindex="-1"><a class="header-anchor" href="#_05-sizeof关键字" aria-hidden="true">#</a> 05 sizeof关键字</h2><p>获取变量类型/变量的占用内存的空间</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>sizeof(变量类型/变量)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_06-命名规则" tabindex="-1"><a class="header-anchor" href="#_06-命名规则" aria-hidden="true">#</a> 06 命名规则</h2><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须是字母或下划线</li><li>标识符字母区分大小写</li><li>见名知意</li></ul>`,33),r=[n];function s(t,c){return a(),i("div",null,r)}const h=e(l,[["render",s],["__file","001初始.html.vue"]]);export{h as default};
