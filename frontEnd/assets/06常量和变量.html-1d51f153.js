import{_ as e,p as a,q as i,a1 as n}from"./framework-96b046e1.js";const l={},d=n(`<h1 id="_06-常量和变量" tabindex="-1"><a class="header-anchor" href="#_06-常量和变量" aria-hidden="true">#</a> 06 常量和变量</h1><h2 id="_01-常量" tabindex="-1"><a class="header-anchor" href="#_01-常量" aria-hidden="true">#</a> 01 常量</h2><ol><li>整型常量 随便写一个整数就是整型常量</li><li>实型常量 其实就是小数</li><li>字符串常量 单或双引号括起来的常量。</li><li>布尔常量 true 和false</li><li>自定义常量 ES6新增，格式为const 常量名称=常量</li></ol><h2 id="_02-变量" tabindex="-1"><a class="header-anchor" href="#_02-变量" aria-hidden="true">#</a> 02 变量</h2><p>变量是可以被修改的数据 <code>var 变量名 = ;</code></p><ol><li>在JavaScript中第一次给变量赋值，我们称之为 “ 变量初始化 ”！请悉知。</li><li>在JavaScript中定义了一个变量，没有进行初始化，那么变量中存储的是undefined。</li><li>初始化变量的两种形式： <ol><li>定义的同时初始化：<code>var a = 5;</code></li><li>先定义后初始化: <code>var a; a = 5;</code></li></ol></li><li>同时定义多个变量<code>var a, b, c;</code></li><li>值相同时,同时初始化多个变量<code>a = b = c = 5;</code></li><li>值不同时,同时初始化多个变量<code>var a = 5, b = 3;</code></li></ol><p><strong>注意点</strong> 1.</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>var num = 888;//定义一个变量并赋值
	num = 666;//修改赋值
var num = 777;//注意不是修改赋值了,而是直接重新定义了一个变量,覆盖了上面的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在老版本的标准 (ES6之前) JavaScript可以先使用变量，再定义变量，并不会报错。<strong>但如果从前到后都没有定义变量，就会报错</strong>。</li></ol><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>console.log(num);//输出undefined
var num = 666;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：JavaScript是一门解释性语言，边解析边执行，浏览器在解析js代码之前还会进行一个操作“预解析”。 预解析（预处理）步骤：将js代码中所有变量的定义（声明）和函数的定义放到所有代码的最前面。预处理后变成下面</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>var num;
console.log(num);//输出undefined
num = 666;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-es6之变量" tabindex="-1"><a class="header-anchor" href="#_03-es6之变量" aria-hidden="true">#</a> 03 ES6之变量</h2><p>其实，上述的两个注意点是两个给编程者容易带来麻烦的问题，比如你忘记之前定义过此变量，又定义了一次，之后想使用第一次定义的那个，但却又不报错，代码量较大，就给排错带来麻烦。又或者定义了一个变量在后面，修改代码时想在前面用，结果却输出了undefined，也不报错，给排错带来困难。 ES6解决了这一问题。</p><ol><li>声明一个变量：<code>let num = 5;</code></li><li>用法基本不变且下面两种情况都会报错</li></ol><div class="language-javaScript line-numbers-mode" data-ext="javaScript"><pre class="language-javaScript"><code>let num = 5;
let num = 6;//会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>console.log(num);
let num = 6;
//也会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),r=[d];function s(c,v){return a(),i("div",null,r)}const o=e(l,[["render",s],["__file","06常量和变量.html.vue"]]);export{o as default};
