import{_ as s,p as a,q as n,a1 as e}from"./framework-96b046e1.js";const p={},t=e(`<h1 id="_11-运算符" tabindex="-1"><a class="header-anchor" href="#_11-运算符" aria-hidden="true">#</a> 11 运算符</h1><h2 id="_01-运算符分类" tabindex="-1"><a class="header-anchor" href="#_01-运算符分类" aria-hidden="true">#</a> 01 运算符分类</h2><p>按功能分类</p><ol><li>算数运算符</li><li>位运算符</li><li>关系运算符</li><li>逻辑运算符 按参与运算操作数的个数</li><li>单目运算i++</li><li>双目运算a+b</li><li>三目运算a&lt;b?1:0 操作数:例如a+b中a和b就是2个操作数</li></ol><h2 id="_02-运算符优先级与结合性" tabindex="-1"><a class="header-anchor" href="#_02-运算符优先级与结合性" aria-hidden="true">#</a> 02 运算符优先级与结合性</h2><p>Js中，运算符优先级共分为15级，1级最高，15级最低，最高者优先计算，优先级相同则按结合性所规定的结合方向处理(从左往右算为左结合，从右往左算为右结合)表格见课时23最后</p><h2 id="_03-算数运算符" tabindex="-1"><a class="header-anchor" href="#_03-算数运算符" aria-hidden="true">#</a> 03 算数运算符</h2><p>+、-、*、/、%加减乘除取余(取模) *、/、%优先级高于+、- <strong>注意点</strong></p><ol><li>任何非数值类型的数据参与加法运算前会被转为数值类型。 <code>let num = 2 + true; // 3</code></li><li>任何数据和字符串相加，都会被先转化为字符串后再运算。 <code>let res = 1 + &quot;23&quot; ; //123</code></li><li>任何数据与NaN进行运算都是NaN。</li><li>1,3两条适用于加法和减法，2只适用于加法。</li><li>任何数据字符串相减，字符串都会先被转化为数值类型。 <code>let res = 1 - &quot;23&quot; //-22</code></li><li>乘除法注意点和减法一样。1 3 5 三条</li></ol><p><strong>取模(取余)运算注意点</strong> m%n=余数</p><ol><li>如果m＞n，则正常取余。</li><li>如果m＜n，则结果为m。</li><li>如果n是0，则结果为NaN。</li><li>取模结果的正负性与m的正负性有关，与n的正负性无关。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_04-赋值运算符" aria-hidden="true">#</a> 04 赋值运算符</h2><p>=（简单赋值运算符）+=、-=、*=、/=、%=（复合赋值运算符）比算数运算符优先级低，具有右结合性（从右到左计算）。</p><h2 id="_05-自增运算符" tabindex="-1"><a class="header-anchor" href="#_05-自增运算符" aria-hidden="true">#</a> 05 自增运算符</h2><p>++ 、 -- 表达式：表达式是用运算符连接在一起的有意义的语句（例：a = b * 5）。</p><ol><li>常量不能使用自增/自减运算符</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>表达式不能用自增/自减运算符</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//错</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> b<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//对，表示b先加5再自增</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>企业开发中自增/自减运算符最好单独出现，不要出现在表达式中，原因是不便于阅读。</li></ol><h2 id="_06-关系运算符" tabindex="-1"><a class="header-anchor" href="#_06-关系运算符" aria-hidden="true">#</a> 06 关系运算符</h2><ol><li><code>&gt;、&lt;、&gt;=、&lt;=、==、!=、===、!==</code></li><li><code>==</code>只判断取值是否相等，不判断数据类型是否相同。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>===</code>即判断取值，又判断数据类型是否相同。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意点</strong></p><ol><li>对于非数值类型的数据，会先转换为数值类型，再进行判断。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//1&gt;1 --&gt; false</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//1&gt;0 --&gt; true</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//1&gt;0 --&gt;true</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">;</span><span class="token comment">//1&gt;10 --&gt;false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>任何数据与NaN比较都会返回false。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">NaN</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">NaN</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">NaN</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果参与比较的都是字符串，那么就不会转换为数值类型再比较，而是比较字符串类型的Unicode编码，</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span> <span class="token comment">//0061&gt;0062 --&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果字符串由多个字符组成，如“abc”与“abb”比较，会逐个比较，先比较a与a，相等在比较b与b，相等再比较c与b，就是直至比较出不相等的时候，立即停止比较，给出大小判断结果。 4. null转化为数值为0</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>但是</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">//true,undefined是由null衍生出来的</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>如果要判断是否为NaN，则可用函数isNaN()</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结合性与优先级</strong></p><ol><li>左结合性</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;</span><span class="token number">5</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//true&gt;3 --&gt; 1&gt;3 --&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以不能使用关系运算符判断区间，比如判断a是否为10~20之间的数。 2. “&gt;、&lt;、&gt;=、&lt;=”优先级高于“!=、==、===、!==”</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//10==true --&gt; 10==1 --&gt;false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_07-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_07-逻辑运算符" aria-hidden="true">#</a> 07 逻辑运算符</h2><p>“&amp;&amp;、||、！”与或非</p><p><strong>优先级与结合性</strong></p><ol><li>左结合性，&amp;&amp;优先级高于||</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意点</strong></p><ol><li>对于非布尔类型的会先转化为布尔类型，再逻辑运算。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//!false --&gt; true</span>
<span class="token keyword">let</span> res <span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//!true --&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在逻辑与&quot;&amp;&amp;&quot;运算中，如果不是布尔类型，会先转化为布尔类型，但返回值有特点。 格式：条件A &amp;&amp; 条件B 如果条件A不成立，就返回条件A 如果条件A成立，无论B怎样，都会返回B</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//null</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//123</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在逻辑或&quot;||&quot;运算中，如果不是布尔类型，会先转化为布尔类型，但返回值有特点。 格式：条件A || 条件B 如果条件A成立，就返回条件A 如果条件A不成立，无论B怎样，都会返回B</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">666</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//666</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">// 123</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>在逻辑与运算中，有逻辑短路现象，只要前面为假，后面就不执行了。 在逻辑或运算中，有逻辑短路现象，只要前面为真，后面就不执行了。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">++</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出num判断是否自增</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_08-逗号运算符" tabindex="-1"><a class="header-anchor" href="#_08-逗号运算符" aria-hidden="true">#</a> 08 逗号运算符</h2><ol><li>一般用于减缓代码</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token comment">//同时定义多个变量</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//同时初始化多个变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>优先级是所有运算符中最低的 结合性是左结合性。</li><li>它也是一个运算符，也有运算结果，运算结果是最后一个表达式的结果。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_09-三目运算符" tabindex="-1"><a class="header-anchor" href="#_09-三目运算符" aria-hidden="true">#</a> 09 三目运算符</h2><p>条件表达式?结果A:结果B</p><h2 id="_10-综合题" tabindex="-1"><a class="header-anchor" href="#_10-综合题" aria-hidden="true">#</a> 10 综合题</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token punctuation">,</span>c<span class="token punctuation">;</span>
b <span class="token operator">=</span> a <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token comment">/*
考察结合性，=为右结合性，先把c的值undefined赋值给a，再把a的值undefined赋值给b
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token comment">/*
==为左结合性，6==6为true，true==6--&gt;1==6为false，res为false
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">/*
&gt;=优先级高于==，1==true --&gt; 1==1 --&gt;true ， res=true
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//问两者区别</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
由于逗号优先级最低
所以1式中会把1+1的值2赋值给res，然后2+2，3+3是没有意义的表达式，就会报错。
2式中不会报错，res=6
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token operator">++</span>a <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment">//6+7=13</span>
<span class="token keyword">let</span> res2 <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//5+6=11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71),o=[t];function l(c,r){return a(),n("div",null,o)}const d=s(p,[["render",l],["__file","11运算符.html.vue"]]);export{d as default};
