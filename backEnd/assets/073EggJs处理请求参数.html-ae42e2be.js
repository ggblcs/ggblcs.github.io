import{_ as n,p as s,q as a,a1 as t}from"./framework-96b046e1.js";const e={},p=t(`<h1 id="_073-eggjs处理请求参数" tabindex="-1"><a class="header-anchor" href="#_073-eggjs处理请求参数" aria-hidden="true">#</a> 073 EggJs处理请求参数</h1><h2 id="_1-eggjs获取请求参数基础" tabindex="-1"><a class="header-anchor" href="#_1-eggjs获取请求参数基础" aria-hidden="true">#</a> 1.EggJs获取请求参数基础</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
1.EggJS如何处理Get/Post请求参数?
&quot;和Koa一样&quot;
* */</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>getQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/register/:name/:age&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>getParams<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 动态路由</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>getBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取传统get请求参数</span>
    <span class="token comment">// this.ctx.request.query</span>
    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">;</span> <span class="token comment">// 一种简写，省去request</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> query<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取动态路由形式的get请求参数</span>
    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>params<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> params<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取post请求参数 </span>
    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span> <span class="token comment">// 为了不和响应数据方法this.ctx.body重名，此处要加request</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-eggjs获取请求参数失败" tabindex="-1"><a class="header-anchor" href="#_2-eggjs获取请求参数失败" aria-hidden="true">#</a> 2.EggJs获取请求参数失败</h2><p>使用postman发送post请求是不会成功的，因为之前讲过有CSRF安全防范，在指南---&gt;安全中可找到。所以要配置忽略。<strong>但是不建议这样操作，只是为了更方便的学习基础</strong></p><p>配置文件在<code>config-&gt;config.default.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// exports.keys = &#39;COM.it666.*?&#39;; // 用于生成客户端中保存的userId</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">keys</span><span class="token operator">:</span> <span class="token string">&#39;COM.it666.*?&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 用于生成客户端中保存的userId</span>
    <span class="token literal-property property">security</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">csrf</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">ignoreJSON</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 默认为 false，当设置为 true 时，将会放过所有 content-type 为 \`application/json\` 的请求</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","073EggJs处理请求参数.html.vue"]]);export{r as default};
