import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const e={},t=p(`<h1 id="_04-js高级阶段高频面试题" tabindex="-1"><a class="header-anchor" href="#_04-js高级阶段高频面试题" aria-hidden="true">#</a> 04 -js高级阶段高频面试题</h1><h2 id="前端面试题" tabindex="-1"><a class="header-anchor" href="#前端面试题" aria-hidden="true">#</a> 前端面试题</h2><h3 id="_1、值类型和引用类型的区别" tabindex="-1"><a class="header-anchor" href="#_1、值类型和引用类型的区别" aria-hidden="true">#</a> 1、值类型和引用类型的区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、值类型
	<span class="token number">1</span>）基本类型数据是值类型
    <span class="token number">2</span>）保存与复制的是值本身
    <span class="token number">3</span>）使用<span class="token keyword">typeof</span>检测数据的类型
<span class="token number">2</span>、引用类型
	<span class="token number">1</span>）保存与复制的是指向对象的一个指针
    <span class="token number">2</span>）使用<span class="token keyword">instanceof</span>检测数据类型
    <span class="token number">3</span>）使用 <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法构造出的对象是引用型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、什么是深拷贝什么是浅拷贝" tabindex="-1"><a class="header-anchor" href="#_2、什么是深拷贝什么是浅拷贝" aria-hidden="true">#</a> 2、什么是深拷贝什么是浅拷贝</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>答: 浅拷贝: 拷贝对象的一层属性,如果对象里面还有对象,拷贝的是地址, 两者之间修改会有影响,适用于对象里面属性的值是简单数据类型的.
    深拷贝: 拷贝对象的多层属性,如果对象里面还有对象,会继续拷贝,使用递归去实现.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、如何实现深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#_3、如何实现深拷贝和浅拷贝" aria-hidden="true">#</a> 3、如何实现深拷贝和浅拷贝</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">答</span><span class="token operator">:</span>
<span class="token literal-property property">浅拷贝</span><span class="token operator">:</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;UI&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
      <span class="token literal-property property">love</span><span class="token operator">:</span> <span class="token string">&#39;eat&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> newObj
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>

<span class="token literal-property property">深拷贝</span><span class="token operator">:</span> 
		<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;前端&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
      <span class="token literal-property property">love</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">friuts</span> <span class="token operator">:</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meat</span><span class="token operator">:</span> <span class="token string">&#39;beef&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
		<span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* if (typeof obj[k] == &#39;object&#39;) {
          newObj[k] = getObj(obj[k])
        } else {
          newObj[k] = obj[k]
        } */</span>
        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> newObj
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、对闭包的理解-并能举出闭包的例子" tabindex="-1"><a class="header-anchor" href="#_4、对闭包的理解-并能举出闭包的例子" aria-hidden="true">#</a> 4、对闭包的理解？并能举出闭包的例子</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">答</span><span class="token operator">:</span> 闭包 <span class="token function">函数和声明该函数的词法环境的组合</span><span class="token punctuation">(</span>两个嵌套关系的函数<span class="token punctuation">,</span>内部函数可以访问外部函数定义的变量<span class="token punctuation">)</span>
    闭包的优点：<span class="token number">1</span>、形成私有空间，避免全局变量的污染
               <span class="token number">2</span>、持久化内存，保存数据
    闭包的缺点：<span class="token number">1</span>、持久化内存，导致内存泄露
    解决：<span class="token number">1</span>、尽快避免函数的嵌套，以及变量的引用
          <span class="token number">2</span>、执行完的变量，可以赋值<span class="token keyword">null</span>，让垃圾回收机制，进行回收释放内存（当不在引用的变量，垃圾回收机制就会回收）
<span class="token literal-property property">例</span><span class="token operator">:</span> 点击li获取当前下标
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">111</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">333</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">444</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">555</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
      <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、什么是原型和原型链" tabindex="-1"><a class="header-anchor" href="#_5、什么是原型和原型链" aria-hidden="true">#</a> 5、什么是原型和原型链</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>答: 原型: 函数都有prototype属性,这个属性的值是个对象,称之为原型
   原型链: 对象都有__proto__属性,这个属性指向它的原型对象,原型对象也是对象,也有__proto__属性,指向原型对象的原型对象,这样一层一层形成的链式结构称为原型链.原型链顶层是null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、call、apply和bind的区别" tabindex="-1"><a class="header-anchor" href="#_6、call、apply和bind的区别" aria-hidden="true">#</a> 6、call、apply和bind的区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">答</span><span class="token operator">:</span>  <span class="token number">1.</span> call和apply方法都可以调用函数<span class="token punctuation">,</span>方法内的第一个参数可以修改<span class="token keyword">this</span>的指向
	<span class="token number">2.</span> call方法可以有多个参数<span class="token punctuation">,</span>除了第一个参数<span class="token punctuation">,</span>其他参数作为实参传递给函数
	<span class="token number">3</span><span class="token punctuation">.</span>apply方法最多有<span class="token number">2</span>个参数<span class="token punctuation">,</span>第二个参数是个数组或伪数组<span class="token punctuation">,</span>数组里面的每一项作为实参传递给函数
	<span class="token number">3.</span> bind方法不能调用函数<span class="token punctuation">,</span>它会创建一个副本函数<span class="token punctuation">,</span>并且绑定新函数的<span class="token keyword">this</span>指向bind返回的新的函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、es6-es10新增常用方法" tabindex="-1"><a class="header-anchor" href="#_7、es6-es10新增常用方法" aria-hidden="true">#</a> 7、es6-es10新增常用方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">答</span><span class="token operator">:</span> 
<span class="token literal-property property">es6</span><span class="token operator">:</span>
<span class="token number">1</span>、<span class="token keyword">let</span>、<span class="token keyword">const</span>
<span class="token number">2</span>、解构赋值   <span class="token keyword">let</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token number">3</span><span class="token function">、箭头函数</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token number">4</span>、字符串模板  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
<span class="token number">5</span>、扩展运算符  <span class="token operator">...</span>arr
<span class="token number">6</span>、数组方法：map、filter、some等等
<span class="token number">7</span>、类：<span class="token keyword">class</span>关键字 extend
<span class="token number">8</span>、promise 主要用于异步计算
<span class="token number">9</span>、函数参数默认值 <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token number">10</span>、对象属性简写 <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span>
<span class="token number">11</span>、模块化：<span class="token keyword">import</span><span class="token operator">--</span>引入、exprot <span class="token keyword">default</span><span class="token operator">--</span>导出

<span class="token literal-property property">es7</span><span class="token operator">:</span>
<span class="token number">1</span><span class="token function">、includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回<span class="token boolean">true</span>，否则返回<span class="token boolean">false</span>。

<span class="token literal-property property">es8</span><span class="token operator">:</span>
<span class="token number">1</span>、async<span class="token operator">/</span><span class="token keyword">await</span>

es9：
<span class="token number">1</span> Promise<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 允许你指定最终的逻辑
<span class="token number">2</span> promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 并发请求
<span class="token number">3</span> promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 赛跑机制

<span class="token literal-property property">es10</span><span class="token operator">:</span>
<span class="token number">1</span><span class="token function">、数组Array的flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">和flatmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token literal-property property">flat</span><span class="token operator">:</span>方法最基本的作用就是数组降维
      <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment">// [1, 2, 3, 4]</span>

        <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>

        <span class="token comment">//使用 Infinity 作为深度，展开任意深度的嵌套数组</span>
        arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>
   <span class="token literal-property property">flatmap</span><span class="token operator">:</span><span class="token function">方法首先使用映射函数映射</span><span class="token punctuation">(</span>遍历<span class="token punctuation">)</span>每个元素，然后将结果压缩成一个新数组
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、let、const和var的区别" tabindex="-1"><a class="header-anchor" href="#_8、let、const和var的区别" aria-hidden="true">#</a> 8、let、const和var的区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、<span class="token keyword">var</span>声明变量存在提升（提升当前作用域最顶端），<span class="token keyword">let</span>和<span class="token keyword">const</span>是不存在变量提升的情况
<span class="token number">2</span>、<span class="token keyword">var</span>没有块级作用，<span class="token keyword">let</span>和<span class="token keyword">const</span>存在块级作用域
<span class="token number">3</span>、<span class="token keyword">var</span>允许重复声明，<span class="token keyword">let</span>和<span class="token keyword">const</span>在同一作用域不允许重复声明
<span class="token number">4</span>、<span class="token keyword">var</span>和<span class="token keyword">let</span>声明变量可以修改，<span class="token keyword">const</span>是常量不能改变
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、怎么理解函数的防抖和节流" tabindex="-1"><a class="header-anchor" href="#_9、怎么理解函数的防抖和节流" aria-hidden="true">#</a> 9、怎么理解函数的防抖和节流</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">答</span><span class="token operator">:</span>
<span class="token number">1</span>、定义：
<span class="token literal-property property">防抖</span><span class="token operator">:</span> 就是指触发事件后在n秒内函数只能执行一次，如果在n秒内又触发了事件，则会重新计算函数执行时间。
     例如：设定<span class="token number">1000</span>毫秒执行，当你触发事件了，他会<span class="token number">1000</span>毫秒后执行，但是在还剩<span class="token number">500</span>毫秒的时候你又触发了事件，那就会重新开始<span class="token number">1000</span>毫秒之后再执行

<span class="token literal-property property">节流</span><span class="token operator">:</span> 就是指连续触发事件但是在设定的一段时间内中只执行一次函数。
     例如：设定<span class="token number">1000</span>毫秒执行，那你在<span class="token number">1000</span>毫秒触发在多次，也只在<span class="token number">1000</span>毫秒后执行一次
     
<span class="token number">2</span>、防抖和节流的实现：
    <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;ipt&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
      <span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.ipt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 防抖</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是防抖&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.ipt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 节流</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是节流&#39;</span><span class="token punctuation">)</span>
          timerId <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、js的运行机制是什么" tabindex="-1"><a class="header-anchor" href="#_10、js的运行机制是什么" aria-hidden="true">#</a> 10、js的运行机制是什么</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>答：js是单线程执行的，页面加载时，会自上而下执行主线程上的同步任务，当主线程代码执行完毕时，才开始执行在任务队列中的异步任务。具体如下  
    1.所有同步任务都在主线程上执行，形成一个执行栈。
    2.主线程之外，还存在一个&quot;任务队列(eventloop队列或者消息队列)&quot;。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。
    3.一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。哪些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
    4.主线程不断重复上面的第三步。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、怎么理解面向对象" tabindex="-1"><a class="header-anchor" href="#_11、怎么理解面向对象" aria-hidden="true">#</a> 11、怎么理解面向对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>答：<span class="token number">1</span>、面向对象是一种软件开发的思想和面向过程是相对应的，就是把程序看作一个对象，将属性和方法封装其中，以提高代码的灵活性、复用性、可扩展性。
  <span class="token number">2</span>、面向对象有三大特性：封装、继承、多态。
       封装：把相关的信息（无论数据或方法）存储在对象中的能力
       继承：由另一个类（或多个类）得来类的属性和方法的能力
       多态：编写能以多种方法运行的函数或方法的能力
   <span class="token number">3</span>、基本思想是使用对象，类，继承，封装等基本概念来进行程序设计
     易维护
     易扩展
     开发工作的重用性、继承性高，降低重复工作量。
     缩短了开发周期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12、数组如何进行降维-扁平化" tabindex="-1"><a class="header-anchor" href="#_12、数组如何进行降维-扁平化" aria-hidden="true">#</a> 12、数组如何进行降维（扁平化）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、利用Array<span class="token punctuation">.</span>some方法判断数组中是否还存在数组，es6展开运算符连接数组
       <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token number">2</span>、使用数组的concat方法
　   <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
     <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
     result <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>

<span class="token number">3</span>、 使用数组的concat方法和扩展运算符
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>
        
<span class="token number">4</span>、es6中的flat函数也可以实现数组的扁平化
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;中&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;文&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span> <span class="token number">Infinity</span> <span class="token punctuation">)</span>
    注意：flat方法的infinity属性，可以实现多层数组的降维
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14、斐波那契数列" tabindex="-1"><a class="header-anchor" href="#_14、斐波那契数列" aria-hidden="true">#</a> 14、斐波那契数列</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 斐波那契数列</span>
  <span class="token keyword">function</span> <span class="token function">fiB</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
      <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fiB</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","04-js高级阶段高频面试题.html.vue"]]);export{r as default};
