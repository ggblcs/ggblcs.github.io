import{_ as r,p as e,q as a,a1 as p}from"./framework-96b046e1.js";const o={},l=p('<h1 id="_09-一些疑问" tabindex="-1"><a class="header-anchor" href="#_09-一些疑问" aria-hidden="true">#</a> 09 一些疑问</h1><p>multipart/form-data 是一种提交数据的形式，类似于 application/json，只是可以直接放入二进制数据</p><p>file 是二进制数据对象，是blob的子类</p><p>Blob: 前端的一个专门用于支持文件操作的二进制对象</p><p>ArrayBuffer：前端的一个通用的二进制缓冲区，类似数组，但在API和特性上却有诸多不同</p><p>Buffer：Node.js提供的一个二进制缓冲区，常用来处理I/O操作</p><p>Blob vs ArrayBuffer</p><p>概念</p><p>「ArrayBuffer」 对象用于表示通用的，固定长度的原始二进制数据缓冲区。你不能直接操纵 ArrayBuffer 的内容，而是需要创建一个 TypedArray 对象或 DataView 对象，该对象以特定格式表示缓冲区，并使用该对象读取和写入缓冲区的内容。</p><p>「Blob」 类型的对象表示不可变的类似文件对象的原始数据。Blob 表示的不一定是 JavaScript 原生格式的数据。File 接口基于 Blob，继承了Blob 功能并将其扩展为支持用户系统上的文件。</p><p>两者区别</p><p>Blob 对象是不可变的，而 ArrayBuffer 是可以通过 TypedArrays 或 DataView 来操作。除非你需要使用 ArrayBuffer 提供的写入/编辑的能力，否则 Blob 格式可能是最好的。</p><p>ArrayBuffer 是存在内存中的，可以直接操作。而 Blob 可以位于磁盘、高速缓存内存和其他不可用的位置。 虽然 Blob 可以直接作为参数传递给其他函数，比如URL.createObjectURL()。但是，你可能仍需要 FileReader 之类的 File API 才能与 Blob 一起使用。</p><p>Blob 与 ArrayBuffer 对象之间是可以相互转化的：</p><p>使用 FileReader 的 readAsArrayBuffer() 方法，可以把 Blob 对象转换为 ArrayBuffer 对象；</p><p>使用 Blob 构造函数，如 new Blob([new Uint8Array(data]);，可以把 ArrayBuffer 对象转换为 Blob 对象。</p><p>这篇文章写得很好</p><p>https://zhuanlan.zhihu.com/p/97768916</p>',18),t=[l];function f(B,i){return e(),a("div",null,t)}const n=r(o,[["render",f],["__file","09一些疑问.html.vue"]]);export{n as default};
