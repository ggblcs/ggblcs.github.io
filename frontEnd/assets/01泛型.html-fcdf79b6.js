import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const t={},p=e(`<h1 id="_01-泛型" tabindex="-1"><a class="header-anchor" href="#_01-泛型" aria-hidden="true">#</a> 01 泛型</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 设有一个恒等函数identity函数，传入什么返回什么</span>
<span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arg <span class="token punctuation">}</span>
<span class="token comment">// 此时虽然可以接受任何类型了，但是也失去了参数类型与返回类型相同这个重要信息。</span>

<span class="token comment">// 泛型</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arg <span class="token punctuation">}</span>
<span class="token comment">// 此时参数类型与返回值类型都是T，总是一致的。</span>
<span class="token comment">// 使用方法一</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 传递参数string，编译器就知道a是stirng类型的了</span>
<span class="token comment">// 使用方法二</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 编译器推断出b为true类型</span>
<span class="token comment">// 不告诉编译器是什么类型，编译器根据传入的实际参数的类型推断出泛型类型参数T的实际类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","01泛型.html.vue"]]);export{u as default};
