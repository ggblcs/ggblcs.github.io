import{_ as a,p as e,q as n,R as i,v as r,a1 as l}from"./framework-96b046e1.js";const t={},h=l('<h1 id="_04-每日面试题微信小程序" tabindex="-1"><a class="header-anchor" href="#_04-每日面试题微信小程序" aria-hidden="true">#</a> 04 每日面试题微信小程序</h1><h1 id="微信小程篇" tabindex="-1"><a class="header-anchor" href="#微信小程篇" aria-hidden="true">#</a> 微信小程篇</h1><h2 id="_1-请谈谈微信小程序主要目录和文件的作用" tabindex="-1"><a class="header-anchor" href="#_1-请谈谈微信小程序主要目录和文件的作用" aria-hidden="true">#</a> 1.请谈谈微信小程序主要目录和文件的作用？</h2><ul><li>project.config.json 项目配置文件，用得最多的就是配置是否开启https校验；</li><li>App.js 设置一些全局的基础数据等；</li><li>App.json 底部tab, 标题栏和路由等设置；</li><li>App.wxss 公共样式，引入iconfont等；</li><li>pages 里面包含一个个具体的页面；</li><li>index.json (配置当前页面标题和引入组件等)；</li><li>index.wxml (页面结构)；</li><li>index.wxss (页面样式表)；</li><li>index.js (页面的逻辑，请求和数据处理等)；</li></ul><h2 id="_2-请谈谈wxml与标准的html的异同" tabindex="-1"><a class="header-anchor" href="#_2-请谈谈wxml与标准的html的异同" aria-hidden="true">#</a> 2 请谈谈wxml与标准的html的异同？</h2>',5),s=i("li",null,"都是用来描述页面的结构；",-1),d=i("li",null,"都由标签、属性等构成；",-1),o=i("li",null,"标签名字不一样，且小程序标签更少，单一标签更多；",-1),u=i("li",null,"WXML仅能在微信小程序开发者工具中预览，而HTML可以在浏览器内预览",-1),c=i("li",null,"组件封装不同， WXML对组件进行了重新封装，",-1),_=i("li",null,"小程序运行在JS Core内，没有DOM树和window对象，小程序中无法使用window对象和document对象。",-1),p=l('<h2 id="_3-请谈谈wxss和css的异同" tabindex="-1"><a class="header-anchor" href="#_3-请谈谈wxss和css的异同" aria-hidden="true">#</a> 3 请谈谈WXSS和CSS的异同？</h2><ul><li>都是用来描述页面的样子；</li><li>WXSS 具有 CSS 大部分的特性，也做了一些扩充和修改；</li><li>WXSS新增了尺寸单位，WXSS 在底层支持新的尺寸单位 rpx；</li><li>WXSS 仅支持部分 CSS 选择器；</li><li>WXSS 提供全局样式与局部样式</li></ul><h2 id="_4-你是怎么封装微信小程序的数据请求的" tabindex="-1"><a class="header-anchor" href="#_4-你是怎么封装微信小程序的数据请求的" aria-hidden="true">#</a> 4 你是怎么封装微信小程序的数据请求的？</h2><ul><li>在根目录下创建utils目录及api.js文件和apiConfig.js文件；</li><li>在apiConfig.js 封装基础的get, post 和 put， upload等请求方法，设置请求体，带上token和异常处理等；</li><li>在api中引入apiConfig.js封装好的请求方法，根据页面数据请求的urls, 设置对应的方法并导出；</li><li>在具体的页面中导入；</li></ul><h2 id="_5-小程序页面间有哪些传递数据的方法" tabindex="-1"><a class="header-anchor" href="#_5-小程序页面间有哪些传递数据的方法" aria-hidden="true">#</a> 5 小程序页面间有哪些传递数据的方法？</h2><ul><li>使用全局变量实现数据传递</li><li>页面跳转或重定向时，使用url带参数传递数据</li><li>使用组件模板 template传递参数</li><li>使用缓存传递参数</li><li>使用数据库传递数据</li></ul><h2 id="_6-请谈谈小程序的生命周期函数" tabindex="-1"><a class="header-anchor" href="#_6-请谈谈小程序的生命周期函数" aria-hidden="true">#</a> 6 请谈谈小程序的生命周期函数？</h2><ul><li>onLoad() 页面加载时触发，只会调用一次，可获取当前页面路径中的参数。</li><li>onShow() 页面显示/切入前台时触发，一般用来发送数据请求；</li><li>onReady() 页面初次渲染完成时触发, 只会调用一次，代表页面已可和视图层进行交互。</li><li>onHide() 页面隐藏/切入后台时触发, 如底部 tab 切换到其他页面或小程序切入后台等。</li><li>onUnload() 页面卸载时触发，如redirectTo或navigateBack到其他页面时。</li></ul><h2 id="_7-简述微信小程序原理" tabindex="-1"><a class="header-anchor" href="#_7-简述微信小程序原理" aria-hidden="true">#</a> 7 简述微信小程序原理？</h2><ul><li>小程序本质就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原生的各种接口；</li><li>它的架构，是数据驱动的架构模式，它的UI和数据是分离的，所有的页面更新，都需要通过对数据的更改来实现；</li><li>它从技术讲和现有的前端开发差不多，采用JavaScript、WXML、WXSS三种技术进行开发；</li><li>功能可分为webview和appService两个部分；</li><li>webview用来展现UI，appService有来处理业务逻辑、数据及接口调用；</li><li>两个部分在两个进程中运行，通过系统层JSBridge实现通信，实现UI的渲染、事件的处理等。</li></ul><h2 id="_8-你是怎么封装微信小程序的数据请求的" tabindex="-1"><a class="header-anchor" href="#_8-你是怎么封装微信小程序的数据请求的" aria-hidden="true">#</a> 8 你是怎么封装微信小程序的数据请求的？</h2><ul><li>在根目录下创建utils目录及api.js文件和apiConfig.js文件；</li><li>在apiConfig.js 封装基础的get, post 和 put， upload等请求方法，设置请求体，带上token和异常处理等；</li><li>在api中引入apiConfig.js封装好的请求方法，根据页面数据请求的urls, 设置对应的方法并导出；</li><li>在具体的页面中导入；</li></ul><h2 id="_9-请谈谈小程序的双向绑定和vue的异同" tabindex="-1"><a class="header-anchor" href="#_9-请谈谈小程序的双向绑定和vue的异同" aria-hidden="true">#</a> 9 请谈谈小程序的双向绑定和vue的异同？</h2><p>大体相同，但小程序直接this.data的属性是不可以同步到视图的，必须调用this.setData()方法！</p><h2 id="_10-小程序内的页面跳转" tabindex="-1"><a class="header-anchor" href="#_10-小程序内的页面跳转" aria-hidden="true">#</a> 10 小程序内的页面跳转</h2><ul><li>wx.navigateTo——保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面（参数必须为字符串）</li><li>wx.redirectTo——关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面</li><li>wx.switchTab——跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面，路径后不能带参数</li><li>wx.navigateBack——关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层</li><li>wx.reLaunch——关闭所有页面，打开到应用内的某个页面</li></ul><h2 id="_11-小程序的优点和缺点" tabindex="-1"><a class="header-anchor" href="#_11-小程序的优点和缺点" aria-hidden="true">#</a> 11 小程序的优点和缺点</h2><p><strong>小程序的优点</strong></p><ul><li>无需下载</li><li>打开速度快</li><li>开发成本低</li><li>为用户提供良好的安全保障。发布有一套严格的审查流程，不能通过审查的程序无法发布上线</li><li>服务请求快</li></ul><p><strong>小程序的缺点</strong></p><ul><li>依托微信，不能开发后台管理功能</li><li>大小限制不能超过2M，不能打开超过5个层级的页面</li></ul><h2 id="_12-如何实现下拉刷新" tabindex="-1"><a class="header-anchor" href="#_12-如何实现下拉刷新" aria-hidden="true">#</a> 12 如何实现下拉刷新</h2><ul><li>先在app.json或page.json中配置enablePullDownRefresh:true</li><li>page里用onPullDownRefresh函数，在下拉刷新时执行</li><li>在下拉函数执行时发起数据请求，请求返回后，调用wx.stopPullDownRefresh停止下拉刷新的状态</li></ul>',23);function x(f,w){return e(),n("div",null,[h,i("ul",null,[s,d,o,i("li",null,"多了一些 wx:if 这样的属性以及 "+r()+" 这样的表达式",1),u,c,_]),p])}const b=a(t,[["render",x],["__file","04每日面试题微信小程序.html.vue"]]);export{b as default};
