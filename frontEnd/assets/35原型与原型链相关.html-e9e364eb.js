import{_ as p,M as o,p as e,q as c,R as n,t as s,N as l,a1 as a}from"./framework-96b046e1.js";const i="/assets/024_07-6d879951.jpg",u="/assets/024_11-f9e20d25.jpg",r="/assets/024_09-b4a5ea3e.jpg",k={},d=a(`<h1 id="_35-原型与原型链相关" tabindex="-1"><a class="header-anchor" href="#_35-原型与原型链相关" aria-hidden="true">#</a> 35 原型与原型链相关</h1><h2 id="_01-prototype特点" tabindex="-1"><a class="header-anchor" href="#_01-prototype特点" aria-hidden="true">#</a> 01 prototype特点</h2><ol><li><p>存储在prototype中的方法可以被对应改造函数创建的所有对象共享。</p></li><li><p>prototype中除了可以存储方法以外，还可以存储属性。</p></li><li><p>prototype如果出现了和构造函数中同名的属性或者方法，对象在访问的时候访问到的是构造函数中的数据。</p></li><li><p>prototype中一般情况下用于存储所有对象都相同的一些属性（比如种类：人）以及方法（比如说固定的语句）</p></li><li><p>如果是对象特有的属性（比如每个人的姓名都不同）或者方法，我们会存储到构造函数中。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// prototype、constructor、proto的对应关系。</span>
<span class="token comment">// 每个”构造函数“中都有一个默认属性，叫做prototype，prototype属性保存着一个对象（或者说prototype就是一个对象），这个对象我们称之为”原型对象“。</span>
<span class="token comment">// 每个原型对象中都有一个默认的属性，叫做constructor，constructor指向当前原型对象对应的那个构造函数。</span>
<span class="token comment">// 通过构造函数创建出来的对象我们称之为”实例对象“，每个实例对象中都有一个默认的属性，叫做\`__proto__\`，\`__proto__\`指向创建它的那个构造函数的原型对象。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="024_07"></p><h2 id="_02-function函数" tabindex="-1"><a class="header-anchor" href="#_02-function函数" aria-hidden="true">#</a> 02 Function函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js中函数是引用类型（对象类型），既然是对象。所以也是通过构造函数创建出来的，“所有函数”都是通过Function构造函数创建出来的对象。</span>
<span class="token comment">// js中只要是“函数”就有prototype属性，“Function函数的”prototype属性指向“Function原型对象“。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>protptype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// js中只要”原型对象“就有constructor属性，”Function原型对象“的constructor指向它对应的构造函数。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>protptype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token comment">// js中万物皆对象，只要是对象就有\`__proto__\`属性。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-object函数" tabindex="-1"><a class="header-anchor" href="#_03-object函数" aria-hidden="true">#</a> 03 Object函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 首字母大写，说明也是一个构造函数。</span>
conselo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
conselo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//type</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),m={href:"https://blog.csdn.net/cc18868876837/article/details/81211729",target:"_blank",rel:"noopener noreferrer"},v=a('<p><img src="'+u+`" alt="024_09"></p><h2 id="_04-原型链" tabindex="-1"><a class="header-anchor" href="#_04-原型链" aria-hidden="true">#</a> 04 原型链</h2><ol><li><p>实例对象查找方法与属性会先查找自己有没有，自己没有查找构造自己的构造函数的原型对象有没有，还没有就找Object的原型对象(指向null)有没有，还没有就报错。全程沿着原型链找。</p></li><li><p>原型对象中有与自己相同的属性，则用自己的，相当于就近原则。</p></li><li><p>自己没有某个属性，但原型对象中有，就会使用原型对象中的。</p></li><li><p>再给一个对象设置属性时不会在(父)构造函数的原型对象中设置，即使该对象原来没有该属性，而原型对象中有，也不会修改原型对象中的，而是自己新增一个同名的属性。代码如下：</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">myName<span class="token punctuation">,</span> myAge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> myName<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> myAge<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span>
   <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;inj&#39;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(Person.prototype.constructor);</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f 实例对象中没有，访问的是父构造函数的原型对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f  父构造函数的原型对象中</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f  父构造函数的原型对象中</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;--------&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;m&#39;</span><span class="token punctuation">;</span><span class="token comment">//实例对象中没有，添加在实例对象中，而不是修改父构造函数的原型对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f  父构造函数的原型对象中</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f  父构造函数的原型对象中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+'" alt="024_11"></p>',5);function _(b,g){const t=o("ExternalLinkIcon");return e(),c("div",null,[d,n("p",null,[s("想要解释清楚，真是废话没少说，重点没说中，怎么办？放弃了，直接上图，图要是看不懂，我还有一个链接，上面解释的比较详细。"),n("a",m,[s("点击"),l(t)])]),v])}const h=p(k,[["render",_],["__file","35原型与原型链相关.html.vue"]]);export{h as default};
