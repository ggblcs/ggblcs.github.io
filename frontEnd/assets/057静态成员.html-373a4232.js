import{_ as s,p as n,q as a,a1 as t}from"./framework-96b046e1.js";const e={},p=t(`<h1 id="_057-静态成员" tabindex="-1"><a class="header-anchor" href="#_057-静态成员" aria-hidden="true">#</a> 057 静态成员</h1><p>类的静态成员不属于类的某个实例</p><p>而是属于类本身。类的静态成员值用static关键字定义，并且只允许通过类名来访问。</p><h2 id="_1-静态成员可访问性" tabindex="-1"><a class="header-anchor" href="#_1-静态成员可访问性" aria-hidden="true">#</a> 1 静态成员可访问性</h2><p>类的静态成员也可以定义不同的可访问性，如public，private和protected</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类的public静态成员对方问没有限制，可以在当前类的内部、外部以及派生类的内部访问</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token constant">A1</span><span class="token punctuation">.</span>x <span class="token punctuation">}</span> <span class="token comment">// ok,允许在类内部访问公有静态成员x</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B1</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token punctuation">{</span>
    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token constant">A1</span><span class="token punctuation">.</span>x <span class="token punctuation">}</span> <span class="token comment">// ok, 允许在派生类内部访问公有静态成员x。</span>
<span class="token punctuation">}</span>
<span class="token constant">A1</span><span class="token punctuation">.</span>x <span class="token comment">// ok, 允许在类外部访问公有静态成员。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类的protected 静态成员允许在当前类的内部和派生类的内部访问，但不允许在当前类的外部访问。</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token constant">A2</span><span class="token punctuation">.</span>x <span class="token punctuation">}</span> <span class="token comment">// ok,允许在类内部访问受保护的静态成员x。</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B2</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token punctuation">{</span>
    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token constant">A2</span><span class="token punctuation">.</span>x <span class="token punctuation">}</span> <span class="token comment">// ok 允许在派生类内部访问受保护的静态成员x</span>
<span class="token punctuation">}</span>
<span class="token comment">// A2.x  // error 不允许在类内部访问受保护的静态成员x</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类的private静态成员之允许在当前类的内部访问。</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A3</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token constant">A3</span><span class="token punctuation">.</span>x <span class="token punctuation">}</span> <span class="token comment">// ok 允许在类内部访问受保护的静态成员x</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B3</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A3</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// b() { A3.x } // err, 不允许在派生类内部访问受保护的静态成员x</span>
<span class="token punctuation">}</span>
<span class="token comment">// A3.x // error, 不允许在类的外部访问受保护的静态成员x</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-继承静态成员" tabindex="-1"><a class="header-anchor" href="#_2-继承静态成员" aria-hidden="true">#</a> 2 继承静态成员</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类的public静态成员和protected静态成员也可以被继承</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> y<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> z<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">B</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// 继承了基类的静态成员x</span>
        <span class="token constant">B</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token comment">// 继承了基类的静态成员y</span>
        <span class="token comment">// B.z; // err</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),c=[p];function o(l,i){return n(),a("div",null,c)}const k=s(e,[["render",o],["__file","057静态成员.html.vue"]]);export{k as default};
